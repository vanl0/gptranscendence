{"version":3,"file":"frameGraphContext.js","sourceRoot":"","sources":["../../../../dev/core/src/FrameGraph/frameGraphContext.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,OAAO,iBAAiB;IAI1B,gBAAgB;IAChB,YACuB,OAAuB,EACvB,eAAyC,EACzC,MAAa;QAFb,YAAO,GAAP,OAAO,CAAgB;QACvB,oBAAe,GAAf,eAAe,CAA0B;QACzC,WAAM,GAAN,MAAM,CAAO;IACjC,CAAC;IAEJ;;;;OAIG;IACI,eAAe,CAAC,SAAiC;QACpD,MAAM,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;QAE9D,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;QAElC,SAAS,CAAC,MAAM,EAAE,CAAC;QAEnB,IAAI,IAAI,CAAC,OAAO,CAAC,oBAAoB,KAAK,mBAAmB,EAAE,CAAC;YAC5D,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBACvB,IAAI,CAAC,OAAO,CAAC,yBAAyB,EAAE,CAAC;YAC7C,CAAC;iBAAM,CAAC;gBACJ,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;YACtD,CAAC;QACL,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,oBAAoB,CAAC,MAA+B;QACvD,OAAO,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAC7D,CAAC;IAED;;;OAGG;IACI,cAAc,CAAC,IAAY;QAC9B,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,aAAa;QAChB,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACI,eAAe;QAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QAChD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;IACpD,CAAC;IAED;;OAEG;IACI,kBAAkB;QACrB,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7C,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACI,cAAc,CAAC,SAAkB,EAAE,UAAmB;QACzD,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC;CACJ","sourcesContent":["import type { AbstractEngine, FrameGraphTextureManager, Scene, FrameGraphTextureHandle, Nullable, InternalTexture } from \"core/index\";\r\n\r\n/**\r\n * Base class for frame graph context.\r\n */\r\nexport class FrameGraphContext {\r\n    private _depthTest: boolean;\r\n    private _depthWrite: boolean;\r\n\r\n    /** @internal */\r\n    constructor(\r\n        protected readonly _engine: AbstractEngine,\r\n        protected readonly _textureManager: FrameGraphTextureManager,\r\n        protected readonly _scene: Scene\r\n    ) {}\r\n\r\n    /**\r\n     * Renders a component without managing the render target.\r\n     * Use this method when you have a component that handles its own rendering logic which is not fully integrated into the frame graph system.\r\n     * @param component The component to render.\r\n     */\r\n    public renderUnmanaged(component: { render: () => void }): void {\r\n        const currentRenderTarget = this._engine._currentRenderTarget;\r\n\r\n        this._scene.incrementRenderId();\r\n        this._scene.resetCachedMaterial();\r\n\r\n        component.render();\r\n\r\n        if (this._engine._currentRenderTarget !== currentRenderTarget) {\r\n            if (!currentRenderTarget) {\r\n                this._engine.restoreDefaultFramebuffer();\r\n            } else {\r\n                this._engine.bindFramebuffer(currentRenderTarget);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a texture from a handle.\r\n     * Note that if the texture is a history texture, the read texture for the current frame will be returned.\r\n     * @param handle The handle of the texture\r\n     * @returns The texture or null if not found\r\n     */\r\n    public getTextureFromHandle(handle: FrameGraphTextureHandle): Nullable<InternalTexture> {\r\n        return this._textureManager.getTextureFromHandle(handle);\r\n    }\r\n\r\n    /**\r\n     * Pushes a debug group to the engine's debug stack.\r\n     * @param name The name of the debug group\r\n     */\r\n    public pushDebugGroup(name: string) {\r\n        this._engine._debugPushGroup?.(name, 1);\r\n    }\r\n\r\n    /**\r\n     * Pops a debug group from the engine's debug stack.\r\n     */\r\n    public popDebugGroup() {\r\n        this._engine._debugPopGroup?.(1);\r\n    }\r\n\r\n    /**\r\n     * Saves the current depth states (depth testing and depth writing)\r\n     */\r\n    public saveDepthStates(): void {\r\n        this._depthTest = this._engine.getDepthBuffer();\r\n        this._depthWrite = this._engine.getDepthWrite();\r\n    }\r\n\r\n    /**\r\n     * Restores the depth states saved by saveDepthStates\r\n     */\r\n    public restoreDepthStates(): void {\r\n        this._engine.setDepthBuffer(this._depthTest);\r\n        this._engine.setDepthWrite(this._depthWrite);\r\n    }\r\n\r\n    /**\r\n     * Sets the depth states for the current render target\r\n     * @param depthTest If true, depth testing is enabled\r\n     * @param depthWrite If true, depth writing is enabled\r\n     */\r\n    public setDepthStates(depthTest: boolean, depthWrite: boolean): void {\r\n        this._engine.setDepthBuffer(depthTest);\r\n        this._engine.setDepthWrite(depthWrite);\r\n    }\r\n}\r\n"]}