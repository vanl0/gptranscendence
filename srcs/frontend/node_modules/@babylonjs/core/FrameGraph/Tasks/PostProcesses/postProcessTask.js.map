{"version":3,"file":"postProcessTask.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Tasks/PostProcesses/postProcessTask.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FrameGraph, FrameGraphTextureHandle, DrawWrapper, FrameGraphRenderPass, FrameGraphRenderContext, EffectWrapper, IStencilState } from \"core/index\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { FrameGraphTask } from \"../../frameGraphTask\";\r\nimport { textureSizeIsObject } from \"../../../Materials/Textures/textureCreationOptions\";\r\n\r\n/**\r\n * Task which applies a post process.\r\n */\r\nexport class FrameGraphPostProcessTask extends FrameGraphTask {\r\n    /**\r\n     * The source texture to apply the post process on.\r\n     * It's allowed to be undefined if the post process does not require a source texture.\r\n     * In that case, targetTexture must be provided.\r\n     */\r\n    public sourceTexture?: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The sampling mode to use for the source texture.\r\n     */\r\n    public sourceSamplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n\r\n    /**\r\n     * The target texture to render the post process to.\r\n     * If not supplied, a texture with the same configuration as the source texture will be created.\r\n     */\r\n    public targetTexture?: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The stencil state to use for the post process (optional).\r\n     */\r\n    public stencilState?: IStencilState;\r\n\r\n    /**\r\n     * The depth attachment texture to use for the post process (optional).\r\n     * Note that a post-process task never writes to the depth buffer: attaching a depth texture is only useful if you want to test against the depth/stencil aspect or write to the stencil buffer.\r\n     */\r\n    public depthAttachmentTexture?: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * If true, the depth attachment will be read-only.\r\n     * This means that the post process will not write to the depth buffer.\r\n     * Setting depthReadOnly and stencilReadOnly to true is useful when you want to also be able to bind this same depth/stencil attachment to a shader.\r\n     * Note that it will only work in WebGPU, as WebGL does not support read-only depth/stencil attachments.\r\n     */\r\n    public depthReadOnly = false;\r\n\r\n    /**\r\n     * If true, the stencil attachment will be read-only.\r\n     * This means that the post process will not write to the stencil buffer.\r\n     * Setting depthReadOnly and stencilReadOnly to true is useful when you want to also be able to bind this same depth/stencil attachment to a shader.\r\n     * Note that it will only work in WebGPU, as WebGL does not support read-only depth/stencil attachments.\r\n     */\r\n    public stencilReadOnly = false;\r\n\r\n    /**\r\n     * If true, color write will be disabled when applying the post process.\r\n     * This means that the post process will not write to the color buffer.\r\n     */\r\n    public disableColorWrite = false;\r\n\r\n    /**\r\n     * If true, the post process will be generated by a back face full-screen quad (CW order).\r\n     */\r\n    public drawBackFace = false;\r\n\r\n    /**\r\n     * If depth testing should be enabled (default is true).\r\n     */\r\n    public depthTest = true;\r\n\r\n    /**\r\n     * The output texture of the post process.\r\n     */\r\n    public readonly outputTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The output depth attachment texture.\r\n     * This texture will point to the same texture than the depthAttachmentTexture property if it is set.\r\n     * Note, however, that the handle itself will be different!\r\n     */\r\n    public readonly outputDepthAttachmentTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The post process to apply.\r\n     */\r\n    public readonly postProcess: EffectWrapper;\r\n\r\n    /**\r\n     * The draw wrapper used by the post process\r\n     */\r\n    public get drawWrapper() {\r\n        return this._postProcessDrawWrapper;\r\n    }\r\n\r\n    protected readonly _postProcessDrawWrapper: DrawWrapper;\r\n    protected _sourceWidth: number;\r\n    protected _sourceHeight: number;\r\n    protected _outputWidth: number;\r\n    protected _outputHeight: number;\r\n\r\n    /**\r\n     * Constructs a new post process task.\r\n     * @param name Name of the task.\r\n     * @param frameGraph The frame graph this task is associated with.\r\n     * @param postProcess The post process to apply.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, postProcess: EffectWrapper) {\r\n        super(name, frameGraph);\r\n\r\n        this.postProcess = postProcess;\r\n        this._postProcessDrawWrapper = this.postProcess.drawWrapper;\r\n\r\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.outputDepthAttachmentTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n\r\n        this.onTexturesAllocatedObservable.add((context) => {\r\n            if (this.sourceTexture !== undefined) {\r\n                context.setTextureSamplingMode(this.sourceTexture, this.sourceSamplingMode);\r\n            }\r\n        });\r\n    }\r\n\r\n    public override isReady() {\r\n        return this.postProcess.isReady();\r\n    }\r\n\r\n    public record(\r\n        skipCreationOfDisabledPasses = false,\r\n        additionalExecute?: (context: FrameGraphRenderContext) => void,\r\n        additionalBindings?: (context: FrameGraphRenderContext) => void\r\n    ): FrameGraphRenderPass {\r\n        if (this.sourceTexture === undefined && this.targetTexture === undefined) {\r\n            throw new Error(`FrameGraphPostProcessTask \"${this.name}\": sourceTexture or targetTexture is required`);\r\n        }\r\n\r\n        const sourceTextureCreationOptions = this.sourceTexture !== undefined ? this._frameGraph.textureManager.getTextureCreationOptions(this.sourceTexture) : undefined;\r\n        if (sourceTextureCreationOptions) {\r\n            sourceTextureCreationOptions.options.samples = 1;\r\n        }\r\n\r\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, this.targetTexture, this.name, sourceTextureCreationOptions);\r\n        if (this.depthAttachmentTexture !== undefined) {\r\n            this._frameGraph.textureManager.resolveDanglingHandle(this.outputDepthAttachmentTexture, this.depthAttachmentTexture);\r\n        }\r\n\r\n        if (sourceTextureCreationOptions) {\r\n            const sourceSize = !sourceTextureCreationOptions.sizeIsPercentage\r\n                ? textureSizeIsObject(sourceTextureCreationOptions.size)\r\n                    ? sourceTextureCreationOptions.size\r\n                    : { width: sourceTextureCreationOptions.size, height: sourceTextureCreationOptions.size }\r\n                : this._frameGraph.textureManager.getAbsoluteDimensions(sourceTextureCreationOptions.size);\r\n\r\n            this._sourceWidth = sourceSize.width;\r\n            this._sourceHeight = sourceSize.height;\r\n        }\r\n\r\n        const outputTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.outputTexture);\r\n\r\n        this._outputWidth = outputTextureDescription.size.width;\r\n        this._outputHeight = outputTextureDescription.size.height;\r\n\r\n        const pass = this._frameGraph.addRenderPass(this.name);\r\n\r\n        pass.depthReadOnly = this.depthReadOnly;\r\n        pass.stencilReadOnly = this.stencilReadOnly;\r\n\r\n        pass.addDependencies(this.sourceTexture);\r\n\r\n        pass.setRenderTarget(this.outputTexture);\r\n        pass.setRenderTargetDepth(this.depthAttachmentTexture);\r\n        pass.setExecuteFunc((context) => {\r\n            additionalExecute?.(context);\r\n            context.applyFullScreenEffect(\r\n                this._postProcessDrawWrapper,\r\n                () => {\r\n                    if (this.sourceTexture !== undefined) {\r\n                        context.bindTextureHandle(this._postProcessDrawWrapper.effect!, \"textureSampler\", this.sourceTexture);\r\n                    }\r\n                    additionalBindings?.(context);\r\n                    this.postProcess.bind();\r\n                },\r\n                this.stencilState,\r\n                this.disableColorWrite,\r\n                this.drawBackFace,\r\n                this.depthTest\r\n            );\r\n        });\r\n\r\n        if (!skipCreationOfDisabledPasses) {\r\n            const passDisabled = this._frameGraph.addRenderPass(this.name + \"_disabled\", true);\r\n\r\n            passDisabled.depthReadOnly = this.depthReadOnly;\r\n            passDisabled.stencilReadOnly = this.stencilReadOnly;\r\n\r\n            passDisabled.addDependencies(this.sourceTexture);\r\n\r\n            passDisabled.setRenderTarget(this.outputTexture);\r\n            passDisabled.setRenderTargetDepth(this.depthAttachmentTexture);\r\n            passDisabled.setExecuteFunc((context) => {\r\n                if (this.sourceTexture !== undefined) {\r\n                    context.copyTexture(this.sourceTexture);\r\n                }\r\n            });\r\n        }\r\n\r\n        return pass;\r\n    }\r\n\r\n    public override dispose(): void {\r\n        this.postProcess.dispose();\r\n        super.dispose();\r\n    }\r\n}\r\n"]}