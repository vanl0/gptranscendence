{"version":3,"file":"fxaaTask.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Tasks/PostProcesses/fxaaTask.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,sDAA+C;AAC7E,OAAO,EAAE,yBAAyB,EAAE,MAAM,mBAAmB,CAAC;AAE9D;;GAEG;AACH,MAAM,OAAO,kBAAmB,SAAQ,yBAAyB;IAG7D;;;;;OAKG;IACH,YAAY,IAAY,EAAE,UAAsB,EAAE,eAAqC;QACnF,KAAK,CAAC,IAAI,EAAE,UAAU,EAAE,eAAe,IAAI,IAAI,mBAAmB,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IACjG,CAAC;IAEe,MAAM,CAClB,4BAA4B,GAAG,KAAK,EACpC,iBAA8D,EAC9D,kBAA+D;QAE/D,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,4BAA4B,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,CAAC;QAE/F,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;QACrD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC;QAEtD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import type { FrameGraph, FrameGraphRenderContext, FrameGraphRenderPass } from \"core/index\";\r\nimport { ThinFXAAPostProcess } from \"core/PostProcesses/thinFXAAPostProcess\";\r\nimport { FrameGraphPostProcessTask } from \"./postProcessTask\";\r\n\r\n/**\r\n * Task which applies a FXAA post process.\r\n */\r\nexport class FrameGraphFXAATask extends FrameGraphPostProcessTask {\r\n    public override readonly postProcess: ThinFXAAPostProcess;\r\n\r\n    /**\r\n     * Constructs a new FXAA task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph this task is associated with.\r\n     * @param thinPostProcess The thin post process to use for the FXAA effect. If not provided, a new one will be created.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, thinPostProcess?: ThinFXAAPostProcess) {\r\n        super(name, frameGraph, thinPostProcess || new ThinFXAAPostProcess(name, frameGraph.engine));\r\n    }\r\n\r\n    public override record(\r\n        skipCreationOfDisabledPasses = false,\r\n        additionalExecute?: (context: FrameGraphRenderContext) => void,\r\n        additionalBindings?: (context: FrameGraphRenderContext) => void\r\n    ): FrameGraphRenderPass {\r\n        const pass = super.record(skipCreationOfDisabledPasses, additionalExecute, additionalBindings);\r\n\r\n        this.postProcess.texelSize.x = 1 / this._sourceWidth;\r\n        this.postProcess.texelSize.y = 1 / this._sourceHeight;\r\n\r\n        return pass;\r\n    }\r\n}\r\n"]}