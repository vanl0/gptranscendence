{"version":3,"file":"legacy.js","sourceRoot":"","sources":["../../../../lts/core/src/Legacy/legacy.ts"],"names":[],"mappings":"AAAA,yDAAyD;AACzD,6DAA6D;AAC7D,OAAO,KAAK,OAAO,oBAAmB;AACtC,OAAO,KAAK,WAAW,0BAAyB;AAIhD;;;;;GAKG;AACH,MAAM,YAAY,GAAG,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;AACjH,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE,CAAC;IACtC,YAAY,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,IAAI,EAAE,CAAC;IAClD,MAAM,aAAa,GAAG,YAAY,CAAC,OAAO,CAAC;IAC3C,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QACvB,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,IAAI,EAAE,CAAC;QAEhD,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;YAC5B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC5B,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,GAAS,WAAY,CAAC,GAAG,CAAC,CAAC;YACvD,CAAC;QACL,CAAC;IACL,CAAC;IACD,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE,CAAC;QACxB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC;YACtB,aAAa,CAAC,GAAG,CAAC,GAAS,OAAQ,CAAC,GAAG,CAAC,CAAC;QAC7C,CAAC;IACL,CAAC;AACL,CAAC;AAED,4BAA2B;AAC3B,MAAM,CAAC,MAAM,KAAK,GAAG;IACjB,UAAU,EAAE,OAAO,CAAC,UAAU;IAC9B,cAAc,EAAE,OAAO,CAAC,cAAc;IACtC,aAAa,EAAE,OAAO,CAAC,aAAa;IACpC,cAAc,EAAE,OAAO,CAAC,cAAc;CACzC,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable @typescript-eslint/no-restricted-imports */\r\nimport * as BABYLON from \"core/index\";\r\nimport * as DebugImport from \"core/Debug/index\";\r\n\r\ndeclare let global: any;\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON (global variable).\r\n *\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst GlobalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof GlobalObject !== \"undefined\") {\r\n    GlobalObject.BABYLON = GlobalObject.BABYLON || {};\r\n    const BABYLONGLOBAL = GlobalObject.BABYLON;\r\n    if (!BABYLONGLOBAL.Debug) {\r\n        BABYLONGLOBAL.Debug = BABYLONGLOBAL.Debug || {};\r\n\r\n        for (const key in DebugImport) {\r\n            if (!BABYLONGLOBAL.Debug[key]) {\r\n                BABYLONGLOBAL.Debug[key] = (<any>DebugImport)[key];\r\n            }\r\n        }\r\n    }\r\n    for (const key in BABYLON) {\r\n        if (!BABYLONGLOBAL[key]) {\r\n            BABYLONGLOBAL[key] = (<any>BABYLON)[key];\r\n        }\r\n    }\r\n}\r\n\r\nexport * from \"core/index\";\r\nexport const Debug = {\r\n    AxesViewer: BABYLON.AxesViewer,\r\n    BoneAxesViewer: BABYLON.BoneAxesViewer,\r\n    PhysicsViewer: BABYLON.PhysicsViewer,\r\n    SkeletonViewer: BABYLON.SkeletonViewer,\r\n};\r\n"]}