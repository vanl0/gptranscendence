{"version":3,"file":"IDrawContext.js","sourceRoot":"","sources":["../../../../dev/core/src/Engines/IDrawContext.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * Interface representing a draw context at the GPU level (draw call)\r\n */\r\nexport interface IDrawContext {\r\n    /**\r\n     * Unique identifier for the draw context.\r\n     */\r\n    uniqueId: number;\r\n    /**\r\n     * True if instances are used in the draw calls\r\n     */\r\n    useInstancing: boolean;\r\n    /**\r\n     * Indicates if the draw should be an indirect draw.\r\n     */\r\n    enableIndirectDraw: boolean;\r\n    /**\r\n     * Buffer used for the indirect draw call when enableIndirectDraw is true.\r\n     */\r\n    indirectDrawBuffer?: GPUBuffer;\r\n\r\n    /**\r\n     * Data for the indirect draw call (only used when enableIndirectDraw is true).\r\n     * @param indexOrVertexCount - The number of indices (if indexed draw) or vertices (if non-indexed draw).\r\n     * @param instanceCount - The number of instances to draw.\r\n     * @param firstIndexOrVertex - The index (if indexed draw) or vertex (if non-indexed draw) offset to start drawing from.\r\n     * @param forceUpdate - If true, forces the update of the indirect draw data even if instanceCount is the same as in the previous call.\r\n     */\r\n    setIndirectData(indexOrVertexCount: number, instanceCount: number, firstIndexOrVertex: number, forceUpdate?: boolean): void;\r\n    /**\r\n     * Resets the draw context to its initial state.\r\n     */\r\n    reset(): void;\r\n    /**\r\n     * Disposes the draw context and its resources.\r\n     */\r\n    dispose(): void;\r\n}\r\n"]}