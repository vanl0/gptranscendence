{"version":3,"file":"webgpuDrawContext.js","sourceRoot":"","sources":["../../../../../dev/core/src/Engines/WebGPU/webgpuDrawContext.ts"],"names":[],"mappings":"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","sourcesContent":["import type { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport type { WebGPUDataBuffer } from \"../../Meshes/WebGPU/webgpuDataBuffer\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IDrawContext } from \"../IDrawContext\";\r\nimport type { WebGPUBufferManager } from \"./webgpuBufferManager\";\r\nimport type { WebGPUPipelineContext } from \"./webgpuPipelineContext\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\n\r\n/**\r\n * WebGPU implementation of the IDrawContext interface.\r\n * This class manages the draw context for WebGPU, including buffers and indirect draw data.\r\n */\r\nexport class WebGPUDrawContext implements IDrawContext {\r\n    private static _Counter = 0;\r\n\r\n    /**\r\n     * Bundle used in fast mode (when compatibilityMode==false)\r\n     */\r\n    public fastBundle?: GPURenderBundle;\r\n    /**\r\n     * Cache of the bind groups. Will be reused for the next draw if isDirty==false (and materialContext.isDirty==false)\r\n     */\r\n    public bindGroups?: GPUBindGroup[];\r\n\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * @internal\r\n     * By default, indirect draws are enabled in NON compatibility mode only\r\n     * To enable indirect draws in compatibility mode (done by the end user), enableIndirectDraw must be set to true\r\n     */\r\n    public _enableIndirectDrawInCompatMode = false;\r\n\r\n    /**\r\n     * Buffers (uniform / storage) used for the draw call\r\n     */\r\n    public buffers: { [name: string]: Nullable<WebGPUDataBuffer> };\r\n\r\n    public indirectDrawBuffer?: GPUBuffer;\r\n\r\n    private _materialContextUpdateId: number;\r\n    private _bufferManager: WebGPUBufferManager;\r\n    private _useInstancing: boolean;\r\n    private _indirectDrawData?: Uint32Array;\r\n    private _currentInstanceCount: number;\r\n    private _isDirty: boolean;\r\n    private _enableIndirectDraw: boolean;\r\n    private _vertexPullingEnabled: boolean;\r\n\r\n    /**\r\n     * Checks if the draw context is dirty.\r\n     * @param materialContextUpdateId The update ID of the material context associated with the draw context.\r\n     * @returns True if the draw or material context is dirty, false otherwise.\r\n     */\r\n    public isDirty(materialContextUpdateId: number): boolean {\r\n        return this._isDirty || this._materialContextUpdateId !== materialContextUpdateId;\r\n    }\r\n\r\n    /**\r\n     * Resets the dirty state of the draw context.\r\n     * @param materialContextUpdateId The update ID of the material context associated with the draw context.\r\n     */\r\n    public resetIsDirty(materialContextUpdateId: number): void {\r\n        this._isDirty = false;\r\n        this._materialContextUpdateId = materialContextUpdateId;\r\n    }\r\n\r\n    public get enableIndirectDraw() {\r\n        return this._enableIndirectDraw;\r\n    }\r\n\r\n    public set enableIndirectDraw(enable: boolean) {\r\n        this._enableIndirectDrawInCompatMode = true;\r\n\r\n        if (this._enableIndirectDraw === enable) {\r\n            return;\r\n        }\r\n\r\n        this._enableIndirectDraw = enable;\r\n\r\n        if (!enable && !this._useInstancing && this.indirectDrawBuffer) {\r\n            this._bufferManager.releaseBuffer(this.indirectDrawBuffer);\r\n            this.indirectDrawBuffer = undefined;\r\n            this._indirectDrawData = undefined;\r\n        } else if (enable && !this.indirectDrawBuffer) {\r\n            this.indirectDrawBuffer = this._bufferManager.createRawBuffer(\r\n                20,\r\n                WebGPUConstants.BufferUsage.CopyDst | WebGPUConstants.BufferUsage.Indirect | WebGPUConstants.BufferUsage.Storage,\r\n                undefined,\r\n                \"IndirectDrawBuffer\"\r\n            );\r\n            this._indirectDrawData = new Uint32Array(5);\r\n            this._indirectDrawData[3] = 0;\r\n            this._indirectDrawData[4] = 0;\r\n        }\r\n    }\r\n\r\n    public get useInstancing() {\r\n        return this._useInstancing;\r\n    }\r\n\r\n    public set useInstancing(use: boolean) {\r\n        if (this._useInstancing === use) {\r\n            return;\r\n        }\r\n\r\n        this._useInstancing = use;\r\n        this._currentInstanceCount = -1;\r\n\r\n        const enableIndirectDrawInCompatMode = this._enableIndirectDrawInCompatMode;\r\n\r\n        this.enableIndirectDraw = use;\r\n\r\n        this._enableIndirectDrawInCompatMode = enableIndirectDrawInCompatMode;\r\n    }\r\n\r\n    /**\r\n     * Creates a new WebGPUDrawContext.\r\n     * @param bufferManager The buffer manager used to manage WebGPU buffers.\r\n     * @param _dummyIndexBuffer A dummy index buffer to be bound as the \"indices\"\r\n     * storage buffer when no index buffer is provided.\r\n     */\r\n    constructor(\r\n        bufferManager: WebGPUBufferManager,\r\n        private _dummyIndexBuffer: WebGPUDataBuffer\r\n    ) {\r\n        this._bufferManager = bufferManager;\r\n        this.uniqueId = WebGPUDrawContext._Counter++;\r\n        this._useInstancing = false;\r\n        this._currentInstanceCount = 0;\r\n        this._enableIndirectDraw = false;\r\n        this._vertexPullingEnabled = false;\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.buffers = {};\r\n        this._isDirty = true;\r\n        this._materialContextUpdateId = 0;\r\n        this.fastBundle = undefined;\r\n        this.bindGroups = undefined;\r\n        this._vertexPullingEnabled = false;\r\n    }\r\n\r\n    /**\r\n     * Associates a buffer to the draw context.\r\n     * @param name The name of the buffer.\r\n     * @param buffer The buffer to set.\r\n     */\r\n    public setBuffer(name: string, buffer: Nullable<WebGPUDataBuffer>): void {\r\n        this._isDirty ||= buffer?.uniqueId !== this.buffers[name]?.uniqueId;\r\n\r\n        this.buffers[name] = buffer;\r\n    }\r\n\r\n    public setIndirectData(indexOrVertexCount: number, instanceCount: number, firstIndexOrVertex: number, forceUpdate = false): void {\r\n        if ((!forceUpdate && instanceCount === this._currentInstanceCount) || !this.indirectDrawBuffer || !this._indirectDrawData) {\r\n            // The current buffer is already up to date so do nothing\r\n            // Note that we only check for instanceCount and not indexOrVertexCount nor firstIndexOrVertex because those values\r\n            // are supposed to not change during the lifetime of a draw context\r\n            return;\r\n        }\r\n        this._currentInstanceCount = instanceCount;\r\n\r\n        this._indirectDrawData[0] = indexOrVertexCount;\r\n        this._indirectDrawData[1] = instanceCount;\r\n        this._indirectDrawData[2] = firstIndexOrVertex;\r\n\r\n        this._bufferManager.setRawData(this.indirectDrawBuffer, 0, this._indirectDrawData, 0, 20);\r\n    }\r\n\r\n    public setVertexPulling(\r\n        useVertexPulling: boolean,\r\n        webgpuPipelineContext: WebGPUPipelineContext,\r\n        vertexBuffers: { [key: string]: Nullable<VertexBuffer> },\r\n        indexBuffer: Nullable<DataBuffer>,\r\n        overrideVertexBuffers: Nullable<{ [kind: string]: Nullable<VertexBuffer> }>\r\n    ): void {\r\n        if (this._vertexPullingEnabled === useVertexPulling) {\r\n            return;\r\n        }\r\n\r\n        this._vertexPullingEnabled = useVertexPulling;\r\n        this._isDirty = true;\r\n\r\n        const bufferNames = webgpuPipelineContext.shaderProcessingContext.bufferNames;\r\n\r\n        if (overrideVertexBuffers) {\r\n            for (const attributeName in overrideVertexBuffers) {\r\n                const vertexBuffer = overrideVertexBuffers[attributeName];\r\n                if (!vertexBuffer || bufferNames.indexOf(attributeName) === -1) {\r\n                    continue;\r\n                }\r\n\r\n                const buffer = vertexBuffer.effectiveBuffer as Nullable<WebGPUDataBuffer>;\r\n\r\n                this.setBuffer(attributeName, useVertexPulling ? buffer : null);\r\n            }\r\n        }\r\n\r\n        for (const attributeName in vertexBuffers) {\r\n            if (overrideVertexBuffers && attributeName in overrideVertexBuffers) {\r\n                continue;\r\n            }\r\n\r\n            const vertexBuffer = vertexBuffers[attributeName];\r\n            if (!vertexBuffer || bufferNames.indexOf(attributeName) === -1) {\r\n                continue;\r\n            }\r\n\r\n            const buffer = vertexBuffer.effectiveBuffer as Nullable<WebGPUDataBuffer>;\r\n\r\n            this.setBuffer(attributeName, useVertexPulling ? buffer : null);\r\n        }\r\n\r\n        if (bufferNames.indexOf(\"indices\") !== -1) {\r\n            this.setBuffer(\"indices\", !useVertexPulling ? null : ((indexBuffer as WebGPUDataBuffer) ?? this._dummyIndexBuffer));\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.indirectDrawBuffer) {\r\n            this._bufferManager.releaseBuffer(this.indirectDrawBuffer);\r\n            this.indirectDrawBuffer = undefined;\r\n            this._indirectDrawData = undefined;\r\n        }\r\n        this.fastBundle = undefined;\r\n        this.bindGroups = undefined;\r\n        this.buffers = undefined as any;\r\n        this._enableIndirectDraw = false;\r\n    }\r\n}\r\n"]}