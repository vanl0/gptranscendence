{"version":3,"file":"thinMinMaxReducer.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/thinMinMaxReducer.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable, EffectWrapperCreationOptions, AbstractEngine, InternalTexture, Scene } from \"core/index\";\r\nimport { Observable } from \"./observable\";\r\nimport { EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport { Engine } from \"core/Engines/engine\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const enum DepthTextureType {\r\n    NormalizedViewDepth = 0,\r\n    ViewDepth = 1,\r\n    ScreenDepth = 2,\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ThinMinMaxReducerPostProcess extends EffectWrapper {\r\n    public static readonly FragmentUrl = \"minmaxRedux\";\r\n\r\n    public static readonly Uniforms = [\"texSize\"];\r\n\r\n    protected override _gatherImports(useWebGPU: boolean, list: Promise<any>[]) {\r\n        if (useWebGPU) {\r\n            this._webGPUReady = true;\r\n            list.push(import(\"../ShadersWGSL/minmaxRedux.fragment\"));\r\n        } else {\r\n            list.push(import(\"../Shaders/minmaxRedux.fragment\"));\r\n        }\r\n    }\r\n\r\n    public textureWidth = 0;\r\n\r\n    public textureHeight = 0;\r\n\r\n    constructor(name: string, engine: Nullable<AbstractEngine> = null, defines = \"\", options?: EffectWrapperCreationOptions) {\r\n        super({\r\n            ...options,\r\n            name,\r\n            engine: engine || Engine.LastCreatedEngine!,\r\n            useShaderStore: true,\r\n            useAsPostProcess: true,\r\n            fragmentShader: ThinMinMaxReducerPostProcess.FragmentUrl,\r\n            uniforms: ThinMinMaxReducerPostProcess.Uniforms,\r\n            defines,\r\n        });\r\n    }\r\n\r\n    public override bind(noDefaultBindings = false) {\r\n        super.bind(noDefaultBindings);\r\n\r\n        const effect = this.drawWrapper.effect!;\r\n\r\n        if (this.textureWidth === 1 || this.textureHeight === 1) {\r\n            effect.setInt2(\"texSize\", this.textureWidth, this.textureHeight);\r\n        } else {\r\n            effect.setFloat2(\"texSize\", this.textureWidth, this.textureHeight);\r\n        }\r\n    }\r\n}\r\n\r\nconst BufferFloat = new Float32Array(4 * 1 * 1);\r\nconst BufferUint8 = new Uint8Array(4 * 1 * 1);\r\nconst MinMax = { min: 0, max: 0 };\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ThinMinMaxReducer {\r\n    public readonly onAfterReductionPerformed = new Observable<{ min: number; max: number }>();\r\n\r\n    public readonly reductionSteps: Array<ThinMinMaxReducerPostProcess>;\r\n\r\n    private _depthRedux: boolean;\r\n    private _depthTextureType: DepthTextureType;\r\n\r\n    public get depthRedux() {\r\n        return this._depthRedux;\r\n    }\r\n\r\n    public set depthRedux(value: boolean) {\r\n        if (this._depthRedux === value) {\r\n            return;\r\n        }\r\n\r\n        this._depthRedux = value;\r\n\r\n        this._recreatePostProcesses();\r\n    }\r\n\r\n    protected readonly _scene: Scene;\r\n\r\n    private _textureWidth = 0;\r\n    private _textureHeight = 0;\r\n\r\n    public get textureWidth() {\r\n        return this._textureWidth;\r\n    }\r\n\r\n    public get textureHeight() {\r\n        return this._textureHeight;\r\n    }\r\n\r\n    constructor(scene: Scene, depthRedux = true) {\r\n        this._scene = scene;\r\n        this._depthRedux = depthRedux;\r\n        this.reductionSteps = [];\r\n    }\r\n\r\n    public setTextureDimensions(width: number, height: number, depthTextureType: DepthTextureType = DepthTextureType.NormalizedViewDepth) {\r\n        if (width === this._textureWidth && height === this._textureHeight && depthTextureType === this._depthTextureType) {\r\n            return false;\r\n        }\r\n\r\n        this._textureWidth = width;\r\n        this._textureHeight = height;\r\n        this._depthTextureType = depthTextureType;\r\n\r\n        this._recreatePostProcesses();\r\n\r\n        return true;\r\n    }\r\n\r\n    public readMinMax(texture: InternalTexture) {\r\n        // Note that we should normally await the call to _readTexturePixels!\r\n        // But because WebGL does the read synchronously, we know the values will be updated without waiting for the promise to be resolved, which will let us get the updated values\r\n        // in the current frame, whereas in WebGPU, the read is asynchronous and we should normally wait for the promise to be resolved to get the updated values.\r\n        // However, it's safe to avoid waiting for the promise to be resolved in WebGPU as well, because we will simply use the current values until \"buffer\" is updated later on.\r\n        // Note that it means we can suffer some rendering artifacts in WebGPU because we may use previous min/max values for the current frame.\r\n        const isFloat = texture.type === Engine.TEXTURETYPE_FLOAT || texture.type === Engine.TEXTURETYPE_HALF_FLOAT;\r\n        const buffer = isFloat ? BufferFloat : BufferUint8;\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this._scene.getEngine()._readTexturePixels(texture, 1, 1, -1, 0, buffer, false);\r\n\r\n        MinMax.min = buffer[0];\r\n        MinMax.max = buffer[1];\r\n\r\n        if (!isFloat) {\r\n            MinMax.min = MinMax.min / 255.0;\r\n            MinMax.max = MinMax.max / 255.0;\r\n        }\r\n\r\n        if (MinMax.min >= MinMax.max) {\r\n            MinMax.min = 0;\r\n            MinMax.max = 1;\r\n        }\r\n\r\n        this.onAfterReductionPerformed.notifyObservers(MinMax);\r\n    }\r\n\r\n    public dispose(disposeAll = true): void {\r\n        if (disposeAll) {\r\n            this.onAfterReductionPerformed.clear();\r\n            this._textureWidth = 0;\r\n            this._textureHeight = 0;\r\n        }\r\n\r\n        for (let i = 0; i < this.reductionSteps.length; ++i) {\r\n            this.reductionSteps[i].dispose();\r\n        }\r\n        this.reductionSteps.length = 0;\r\n    }\r\n\r\n    private _recreatePostProcesses() {\r\n        this.dispose(false);\r\n\r\n        const scene = this._scene;\r\n\r\n        let w = this.textureWidth,\r\n            h = this.textureHeight;\r\n\r\n        const reductionInitial = new ThinMinMaxReducerPostProcess(\r\n            \"Initial reduction phase\",\r\n            scene.getEngine(),\r\n            \"#define INITIAL\" + (this._depthRedux ? \"\\n#define DEPTH_REDUX\" : \"\") + (this._depthTextureType === DepthTextureType.ViewDepth ? \"\\n#define VIEW_DEPTH\" : \"\")\r\n        );\r\n\r\n        reductionInitial.textureWidth = w;\r\n        reductionInitial.textureHeight = h;\r\n\r\n        this.reductionSteps.push(reductionInitial);\r\n\r\n        let index = 1;\r\n\r\n        // create the additional steps\r\n        while (w > 1 || h > 1) {\r\n            w = Math.max(Math.round(w / 2), 1);\r\n            h = Math.max(Math.round(h / 2), 1);\r\n\r\n            const reduction = new ThinMinMaxReducerPostProcess(\r\n                \"Reduction phase \" + index,\r\n                scene.getEngine(),\r\n                \"#define \" + (w == 1 && h == 1 ? \"LAST\" : w == 1 || h == 1 ? \"ONEBEFORELAST\" : \"MAIN\")\r\n            );\r\n\r\n            reduction.textureWidth = w;\r\n            reduction.textureHeight = h;\r\n\r\n            this.reductionSteps.push(reduction);\r\n\r\n            index++;\r\n        }\r\n    }\r\n}\r\n"]}