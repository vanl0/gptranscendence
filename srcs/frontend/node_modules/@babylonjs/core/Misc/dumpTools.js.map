{"version":3,"file":"dumpTools.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/dumpTools.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { _WarnImport } from \"./devTools\";\r\n\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EffectRenderer, EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport { Tools } from \"./tools\";\r\nimport { Clamp } from \"../Maths/math.scalar.functions\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { Logger } from \"./logger\";\r\n\r\ntype DumpResources = {\r\n    canvas: HTMLCanvasElement | OffscreenCanvas;\r\n    dumpEngine?: {\r\n        engine: ThinEngine;\r\n        renderer: EffectRenderer;\r\n        wrapper: EffectWrapper;\r\n    };\r\n};\r\n\r\nlet ResourcesPromise: Promise<DumpResources> | null = null;\r\n\r\nasync function _CreateDumpResourcesAsync(): Promise<DumpResources> {\r\n    // Create a compatible canvas. Prefer an HTMLCanvasElement if possible to avoid alpha issues with OffscreenCanvas + WebGL in many browsers.\r\n    const canvas = (EngineStore.LastCreatedEngine?.createCanvas(100, 100) ?? new OffscreenCanvas(100, 100)) as HTMLCanvasElement | OffscreenCanvas; // will be resized later\r\n    if (canvas instanceof OffscreenCanvas) {\r\n        Logger.Warn(\"DumpData: OffscreenCanvas will be used for dumping data. This may result in lossy alpha values.\");\r\n    }\r\n\r\n    // If WebGL via ThinEngine is not available (e.g. Native), use the BitmapRenderer.\r\n    // If https://github.com/whatwg/html/issues/10142 is resolved, we can migrate to just BitmapRenderer and avoid an engine dependency altogether.\r\n    const { ThinEngine: thinEngineClass } = await import(\"../Engines/thinEngine\");\r\n    if (!thinEngineClass.IsSupported) {\r\n        if (!canvas.getContext(\"bitmaprenderer\")) {\r\n            throw new Error(\"DumpData: No WebGL or bitmap rendering context available. Cannot dump data.\");\r\n        }\r\n        return { canvas };\r\n    }\r\n\r\n    const options = {\r\n        preserveDrawingBuffer: true,\r\n        depth: false,\r\n        stencil: false,\r\n        alpha: true,\r\n        premultipliedAlpha: false,\r\n        antialias: false,\r\n        failIfMajorPerformanceCaveat: false,\r\n    };\r\n    const engine = new thinEngineClass(canvas, false, options);\r\n\r\n    // remove this engine from the list of instances to avoid using it for other purposes\r\n    EngineStore.Instances.pop();\r\n    // However, make sure to dispose it when no other engines are left\r\n    EngineStore.OnEnginesDisposedObservable.add((e) => {\r\n        // guaranteed to run when no other instances are left\r\n        // only dispose if it's not the current engine\r\n        if (engine && e !== engine && !engine.isDisposed && EngineStore.Instances.length === 0) {\r\n            // Dump the engine and the associated resources\r\n            Dispose();\r\n        }\r\n    });\r\n\r\n    engine.getCaps().parallelShaderCompile = undefined;\r\n\r\n    const renderer = new EffectRenderer(engine);\r\n    const { passPixelShader } = await import(\"../Shaders/pass.fragment\");\r\n    const wrapper = new EffectWrapper({\r\n        engine,\r\n        name: passPixelShader.name,\r\n        fragmentShader: passPixelShader.shader,\r\n        samplerNames: [\"textureSampler\"],\r\n    });\r\n\r\n    return {\r\n        canvas: canvas,\r\n        dumpEngine: { engine, renderer, wrapper },\r\n    };\r\n}\r\n\r\nasync function _GetDumpResourcesAsync() {\r\n    if (!ResourcesPromise) {\r\n        ResourcesPromise = _CreateDumpResourcesAsync();\r\n    }\r\n    return await ResourcesPromise;\r\n}\r\n\r\n/**\r\n * Dumps the current bound framebuffer\r\n * @param width defines the rendering width\r\n * @param height defines the rendering height\r\n * @param engine defines the hosting engine\r\n * @param successCallback defines the callback triggered once the data are available\r\n * @param mimeType defines the mime type of the result\r\n * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\r\n * @returns a void promise\r\n */\r\n// Should have \"Async\" in the name but this is a public API and we can't break it now\r\n// eslint-disable-next-line no-restricted-syntax\r\nexport async function DumpFramebuffer(\r\n    width: number,\r\n    height: number,\r\n    engine: AbstractEngine,\r\n    successCallback?: (data: string) => void,\r\n    mimeType = \"image/png\",\r\n    fileName?: string,\r\n    quality?: number\r\n) {\r\n    // Read the contents of the framebuffer\r\n    const bufferView = await engine.readPixels(0, 0, width, height);\r\n\r\n    const data = new Uint8Array(bufferView.buffer);\r\n\r\n    DumpData(width, height, data, successCallback as (data: string | ArrayBuffer) => void, mimeType, fileName, true, undefined, quality);\r\n}\r\n\r\nexport async function DumpDataAsync(\r\n    width: number,\r\n    height: number,\r\n    data: ArrayBufferView,\r\n    mimeType: string | undefined,\r\n    fileName: string | undefined,\r\n    invertY: boolean | undefined,\r\n    toArrayBuffer: true,\r\n    quality?: number\r\n): Promise<ArrayBuffer>;\r\nexport async function DumpDataAsync(\r\n    width: number,\r\n    height: number,\r\n    data: ArrayBufferView,\r\n    mimeType?: string,\r\n    fileName?: string,\r\n    invertY?: boolean,\r\n    toArrayBuffer?: boolean,\r\n    quality?: number\r\n): Promise<string>;\r\n/**\r\n * Dumps an array buffer\r\n * @param width defines the rendering width\r\n * @param height defines the rendering height\r\n * @param data the data array\r\n * @param mimeType defines the mime type of the result\r\n * @param fileName defines the filename to download. If present, the result will automatically be downloaded\r\n * @param invertY true to invert the picture in the Y dimension\r\n * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\r\n * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\r\n * @returns a promise that resolve to the final data\r\n */\r\nexport async function DumpDataAsync(\r\n    width: number,\r\n    height: number,\r\n    data: ArrayBufferView,\r\n    mimeType = \"image/png\",\r\n    fileName?: string,\r\n    invertY = false,\r\n    toArrayBuffer = false,\r\n    quality?: number\r\n): Promise<string | ArrayBuffer> {\r\n    // Convert if data are float32\r\n    if (data instanceof Float32Array) {\r\n        const data2 = new Uint8Array(data.length);\r\n        let n = data.length;\r\n        while (n--) {\r\n            const v = data[n];\r\n            data2[n] = Math.round(Clamp(v) * 255);\r\n        }\r\n        data = data2;\r\n    }\r\n\r\n    const resources = await _GetDumpResourcesAsync();\r\n\r\n    // Keep the async render + read from the shared canvas atomic\r\n    // eslint-disable-next-line no-async-promise-executor\r\n    return await new Promise<string | ArrayBuffer>(async (resolve) => {\r\n        if (resources.dumpEngine) {\r\n            const dumpEngine = resources.dumpEngine;\r\n            dumpEngine.engine.setSize(width, height, true);\r\n\r\n            // Create the image\r\n            const texture = dumpEngine.engine.createRawTexture(data, width, height, Constants.TEXTUREFORMAT_RGBA, false, !invertY, Constants.TEXTURE_NEAREST_NEAREST);\r\n\r\n            dumpEngine.renderer.setViewport();\r\n            dumpEngine.renderer.applyEffectWrapper(dumpEngine.wrapper);\r\n            dumpEngine.wrapper.effect._bindTexture(\"textureSampler\", texture);\r\n            dumpEngine.renderer.draw();\r\n\r\n            texture.dispose();\r\n        } else {\r\n            const ctx = resources.canvas.getContext(\"bitmaprenderer\") as ImageBitmapRenderingContext;\r\n            resources.canvas.width = width;\r\n            resources.canvas.height = height;\r\n\r\n            const imageData = new ImageData(width, height); // ImageData(data, sw, sh) ctor not yet widely implemented\r\n            imageData.data.set(data as Uint8ClampedArray);\r\n            const imageBitmap = await createImageBitmap(imageData, { premultiplyAlpha: \"none\", imageOrientation: invertY ? \"flipY\" : \"from-image\" });\r\n\r\n            ctx.transferFromImageBitmap(imageBitmap);\r\n        }\r\n\r\n        Tools.ToBlob(\r\n            resources.canvas,\r\n            (blob) => {\r\n                if (!blob) {\r\n                    throw new Error(\"DumpData: Failed to convert canvas to blob.\");\r\n                }\r\n\r\n                if (fileName !== undefined) {\r\n                    Tools.DownloadBlob(blob, fileName);\r\n                }\r\n\r\n                const fileReader = new FileReader();\r\n                fileReader.onload = (event: any) => {\r\n                    const result = event.target!.result as string | ArrayBuffer;\r\n                    resolve(result);\r\n                };\r\n\r\n                if (toArrayBuffer) {\r\n                    fileReader.readAsArrayBuffer(blob);\r\n                } else {\r\n                    fileReader.readAsDataURL(blob);\r\n                }\r\n            },\r\n            mimeType,\r\n            quality\r\n        );\r\n    });\r\n}\r\n\r\n/**\r\n * Dumps an array buffer\r\n * @param width defines the rendering width\r\n * @param height defines the rendering height\r\n * @param data the data array\r\n * @param successCallback defines the callback triggered once the data are available\r\n * @param mimeType defines the mime type of the result\r\n * @param fileName The name of the file to download. If present, the result will automatically be downloaded. If not defined, and `successCallback` is also not defined, the result will automatically be downloaded with an auto-generated file name.\r\n * @param invertY true to invert the picture in the Y dimension\r\n * @param toArrayBuffer true to convert the data to an ArrayBuffer (encoded as `mimeType`) instead of a base64 string\r\n * @param quality The quality of the image if lossy mimeType is used (e.g. image/jpeg, image/webp). See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob | HTMLCanvasElement.toBlob()}'s `quality` parameter.\r\n */\r\nexport function DumpData(\r\n    width: number,\r\n    height: number,\r\n    data: ArrayBufferView,\r\n    successCallback?: (data: string | ArrayBuffer) => void,\r\n    mimeType = \"image/png\",\r\n    fileName?: string,\r\n    invertY = false,\r\n    toArrayBuffer = false,\r\n    quality?: number\r\n): void {\r\n    // For back-compat: if no fileName and no callback, force download the result\r\n    if (fileName === undefined && !successCallback) {\r\n        fileName = \"\";\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    DumpDataAsync(width, height, data, mimeType, fileName, invertY, toArrayBuffer, quality)\r\n        // eslint-disable-next-line github/no-then\r\n        .then((result) => {\r\n            if (successCallback) {\r\n                successCallback(result);\r\n            }\r\n        });\r\n}\r\n\r\n/**\r\n * Dispose the dump tools associated resources\r\n */\r\nexport function Dispose() {\r\n    if (!ResourcesPromise) {\r\n        return;\r\n    }\r\n\r\n    // in cases where the engine is not yet created, we need to wait for it to dispose it\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\r\n    ResourcesPromise?.then((resources) => {\r\n        if (resources.canvas instanceof HTMLCanvasElement) {\r\n            resources.canvas.remove();\r\n        }\r\n        if (resources.dumpEngine) {\r\n            resources.dumpEngine.engine.dispose();\r\n            resources.dumpEngine.renderer.dispose();\r\n            resources.dumpEngine.wrapper.dispose();\r\n        }\r\n    });\r\n\r\n    ResourcesPromise = null;\r\n}\r\n\r\n/**\r\n * Object containing a set of static utilities functions to dump data from a canvas\r\n * @deprecated use functions\r\n */\r\nexport const DumpTools = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    DumpData,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    DumpDataAsync,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    DumpFramebuffer,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    Dispose,\r\n};\r\n\r\n/**\r\n * This will be executed automatically for UMD and es5.\r\n * If esm dev wants the side effects to execute they will have to run it manually\r\n * Once we build native modules those need to be exported.\r\n * @internal\r\n */\r\nconst InitSideEffects = () => {\r\n    // References the dependencies.\r\n    Tools.DumpData = DumpData;\r\n    Tools.DumpDataAsync = DumpDataAsync;\r\n    Tools.DumpFramebuffer = DumpFramebuffer;\r\n};\r\n\r\nInitSideEffects();\r\n"]}