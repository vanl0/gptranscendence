{"version":3,"file":"typeStore.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/typeStore.ts"],"names":[],"mappings":"AAAA,gBAAgB;AAChB,gEAAgE;AAChE,MAAM,eAAe,GAA8B,EAAE,CAAC;AAEtD;;GAEG;AACH,MAAM,UAAU,aAAa,CAAC,SAAiB,EAAE,IAAY;IACzD,eAAe,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;AACtC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,QAAQ,CAAC,IAAY;IACjC,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC;AACjC,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY,CAAC,GAAQ;IACjC,KAAK,MAAM,GAAG,IAAI,eAAe,EAAE,CAAC;QAChC,IAAI,GAAG,YAAa,eAAe,CAAC,GAAG,CAAS,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YAC5E,OAAO,GAAG,CAAC;QACf,CAAC;IACL,CAAC;IACD,OAAO,SAAS,CAAC;AACrB,CAAC","sourcesContent":["/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst RegisteredTypes: { [key: string]: object } = {};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function RegisterClass(className: string, type: object) {\r\n    RegisteredTypes[className] = type;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function GetClass(fqdn: string): any {\r\n    return RegisteredTypes[fqdn];\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function GetClassName(obj: any): string {\r\n    for (const key in RegisteredTypes) {\r\n        if (obj instanceof (RegisteredTypes[key] as any) && !key.includes(\"Abstract\")) {\r\n            return key;\r\n        }\r\n    }\r\n    return \"Unknown\";\r\n}\r\n"]}