{"version":3,"file":"decorators.functions.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/decorators.functions.ts"],"names":[],"mappings":"AAAA,MAAM,WAAW,GAAG,EAAE,CAAC;AAEvB,MAAM,qBAAqB,GAAG,EAAE,CAAC;AAEjC,gBAAgB;AAChB,MAAM,UAAU,cAAc,CAAC,MAAW;IACtC,MAAM,QAAQ,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IAEvC,IAAI,CAAO,qBAAsB,CAAC,QAAQ,CAAC,EAAE,CAAC;QACpC,qBAAsB,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;IAChD,CAAC;IAED,OAAa,qBAAsB,CAAC,QAAQ,CAAC,CAAC;AAClD,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,MAAW;IACtC,MAAM,QAAQ,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IAEvC,IAAU,WAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/B,OAAa,WAAY,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAEK,WAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;IAElC,MAAM,KAAK,GAAS,WAAY,CAAC,QAAQ,CAAC,CAAC;IAC3C,IAAI,aAAa,GAAG,MAAM,CAAC;IAC3B,IAAI,UAAU,GAAG,QAAQ,CAAC;IAC1B,OAAO,UAAU,EAAE,CAAC;QAChB,MAAM,YAAY,GAAS,qBAAsB,CAAC,UAAU,CAAC,CAAC;QAC9D,KAAK,MAAM,QAAQ,IAAI,YAAY,EAAE,CAAC;YAClC,KAAK,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC;QAED,IAAI,MAAW,CAAC;QAChB,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,GAAG,CAAC;YACA,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;gBACvB,IAAI,GAAG,IAAI,CAAC;gBACZ,MAAM;YACV,CAAC;YAED,IAAI,MAAM,CAAC,YAAY,EAAE,KAAK,UAAU,EAAE,CAAC;gBACvC,MAAM;YACV,CAAC;YAED,aAAa,GAAG,MAAM,CAAC;QAC3B,CAAC,QAAQ,MAAM,EAAE;QAEjB,IAAI,IAAI,EAAE,CAAC;YACP,MAAM;QACV,CAAC;QAED,UAAU,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;QACnC,aAAa,GAAG,MAAM,CAAC;IAC3B,CAAC;IAED,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["const MergedStore = {};\r\n\r\nconst DecoratorInitialStore = {};\r\n\r\n/** @internal */\r\nexport function GetDirectStore(target: any): any {\r\n    const classKey = target.getClassName();\r\n\r\n    if (!(<any>DecoratorInitialStore)[classKey]) {\r\n        (<any>DecoratorInitialStore)[classKey] = {};\r\n    }\r\n\r\n    return (<any>DecoratorInitialStore)[classKey];\r\n}\r\n\r\n/**\r\n * @returns the list of properties flagged as serializable\r\n * @param target host object\r\n */\r\nexport function GetMergedStore(target: any): any {\r\n    const classKey = target.getClassName();\r\n\r\n    if ((<any>MergedStore)[classKey]) {\r\n        return (<any>MergedStore)[classKey];\r\n    }\r\n\r\n    (<any>MergedStore)[classKey] = {};\r\n\r\n    const store = (<any>MergedStore)[classKey];\r\n    let currentTarget = target;\r\n    let currentKey = classKey;\r\n    while (currentKey) {\r\n        const initialStore = (<any>DecoratorInitialStore)[currentKey];\r\n        for (const property in initialStore) {\r\n            store[property] = initialStore[property];\r\n        }\r\n\r\n        let parent: any;\r\n        let done = false;\r\n\r\n        do {\r\n            parent = Object.getPrototypeOf(currentTarget);\r\n            if (!parent.getClassName) {\r\n                done = true;\r\n                break;\r\n            }\r\n\r\n            if (parent.getClassName() !== currentKey) {\r\n                break;\r\n            }\r\n\r\n            currentTarget = parent;\r\n        } while (parent);\r\n\r\n        if (done) {\r\n            break;\r\n        }\r\n\r\n        currentKey = parent.getClassName();\r\n        currentTarget = parent;\r\n    }\r\n\r\n    return store;\r\n}\r\n"]}