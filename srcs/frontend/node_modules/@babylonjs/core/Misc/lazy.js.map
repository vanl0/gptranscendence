{"version":3,"file":"lazy.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/lazy.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM,OAAO,IAAI;IAIb;;;OAGG;IACH,YAAY,OAAgB;QACxB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,IAAW,KAAK;QACZ,+EAA+E;QAC/E,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC9B,6EAA6E;YAC7E,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC9B,CAAC;QACD,OAAO,IAAI,CAAC,MAAW,CAAC;IAC5B,CAAC;CACJ","sourcesContent":["/**\r\n * A class that lazily initializes a value given a factory function.\r\n */\r\nexport class Lazy<T> {\r\n    private _factory: (() => T) | undefined;\r\n    private _value: T | undefined;\r\n\r\n    /**\r\n     * Creates a new instance of the Lazy class.\r\n     * @param factory A function that creates the value.\r\n     */\r\n    constructor(factory: () => T) {\r\n        this._factory = factory;\r\n    }\r\n\r\n    /**\r\n     * Gets the lazily initialized value.\r\n     */\r\n    public get value(): T {\r\n        // If the factory function is still defined, it means we haven't called it yet.\r\n        if (this._factory) {\r\n            this._value = this._factory();\r\n            // Set the factory function to undefined to allow it to be garbage collected.\r\n            this._factory = undefined;\r\n        }\r\n        return this._value as T;\r\n    }\r\n}\r\n"]}