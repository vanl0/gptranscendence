{"version":3,"file":"flowGraphCancelDelayBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphCancelDelayBlock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,sCAA4B;AAKpD,OAAO,EAAE,oCAAoC,EAAE,MAAM,+CAA+C,CAAC;AACrG,OAAO,EAAE,wBAAwB,EAAE,MAAM,6BAA6B,CAAC;AAIvE,OAAO,EAAE,eAAe,EAAE,0BAA6B;AAEvD;;GAEG;AACH,MAAM,OAAO,yBAA0B,SAAQ,oCAAoC;IAM/E,YAAY,MAAqC;QAC7C,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,wBAAwB,CAAC,CAAC;IACrF,CAAC;IAEM,QAAQ,CAAC,OAAyB,EAAE,cAAyC;QAChF,MAAM,UAAU,GAAG,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QACtE,IAAI,UAAU,IAAI,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YAChE,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;QAC7D,CAAC;QACD,MAAM,MAAM,GAAG,OAAO,CAAC,yBAAyB,CAAC,eAAe,EAAE,EAAqB,CAAC,CAAC;QACzF,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;QACjC,IAAI,KAAK,EAAE,CAAC;YACR,KAAK,CAAC,OAAO,EAAE,CAAC;YAChB,+EAA+E;QACnF,CAAC;QACD,+BAA+B;QAC/B,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAEe,YAAY;QACxB,yEAAuC;IAC3C,CAAC;CACJ;AAED,aAAa,oEAAkC,yBAAyB,CAAC,CAAC","sourcesContent":["import { RegisterClass } from \"core/Misc/typeStore\";\nimport type { AdvancedTimer } from \"../../../../Misc/timer\";\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\nimport { RichTypeFlowGraphInteger } from \"../../../flowGraphRichTypes\";\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport type { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\nimport { getNumericValue } from \"core/FlowGraph/utils\";\n\n/**\n * This block cancels a delay that was previously scheduled.\n */\nexport class FlowGraphCancelDelayBlock extends FlowGraphExecutionBlockWithOutSignal {\n    /**\n     * Input connection: The index value of the scheduled activation to be cancelled.\n     */\n    public readonly delayIndex: FlowGraphDataConnection<FlowGraphInteger>;\n\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n        this.delayIndex = this.registerDataInput(\"delayIndex\", RichTypeFlowGraphInteger);\n    }\n\n    public _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\n        const delayIndex = getNumericValue(this.delayIndex.getValue(context));\n        if (delayIndex <= 0 || isNaN(delayIndex) || !isFinite(delayIndex)) {\n            return this._reportError(context, \"Invalid delay index\");\n        }\n        const timers = context._getGlobalContextVariable(\"pendingDelays\", [] as AdvancedTimer[]);\n        const timer = timers[delayIndex];\n        if (timer) {\n            timer.dispose();\n            // not removing it from the array. Disposing it will clear all of its resources\n        }\n        // activate the out output flow\n        this.out._activateSignal(context);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.CancelDelay;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.CancelDelay, FlowGraphCancelDelayBlock);\n"]}