{"version":3,"file":"clusteredLightingSceneComponent.js","sourceRoot":"","sources":["../../../../../dev/core/src/Lights/Clustered/clusteredLightingSceneComponent.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,uBAAuB,EAAE,gCAA4B;AAE9D,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD;;GAEG;AACH,MAAM,OAAO,+BAA+B;IAWxC;;;OAGG;IACH,YAAY,KAAY;QAdxB;;WAEG;QACI,SAAI,GAAG,uBAAuB,CAAC,sBAAsB,CAAC;QAqCrD,qCAAgC,GAA6B,CAAC,aAAa,EAAE,EAAE;YACnF,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;gBACpC,IAAI,KAAK,CAAC,SAAS,EAAE,KAAK,cAAc,CAAC,+BAA+B,IAA8B,KAAM,CAAC,WAAW,EAAE,CAAC;oBACvH,aAAa,CAAC,IAAI,CAA2B,KAAM,CAAC,cAAc,EAAE,CAAC,CAAC;gBAC1E,CAAC;YACL,CAAC;QACL,CAAC,CAAC;QA/BE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,OAAO,KAAU,CAAC;IAEzB;;;OAGG;IACI,OAAO,KAAU,CAAC;IAEzB;;OAEG;IACI,QAAQ;QACX,IAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC,YAAY,CACzD,uBAAuB,CAAC,sDAAsD,EAC9E,IAAI,EACJ,IAAI,CAAC,gCAAgC,CACxC,CAAC;IACN,CAAC;CASJ;AAED,uBAAuB,CAAC,6BAA6B,GAAG,CAAC,KAAK,EAAE,EAAE;IAC9D,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,uBAAuB,CAAC,sBAAsB,CAAC,EAAE,CAAC;QACvE,KAAK,CAAC,aAAa,CAAC,IAAI,+BAA+B,CAAC,KAAK,CAAC,CAAC,CAAC;IACpE,CAAC;AACL,CAAC,CAAC","sourcesContent":["import type { Scene } from \"core/scene\";\nimport type { RenderTargetsStageAction, ISceneComponent } from \"core/sceneComponent\";\nimport { SceneComponentConstants } from \"core/sceneComponent\";\n\nimport { ClusteredLightContainer } from \"./clusteredLightContainer\";\nimport { LightConstants } from \"../lightConstants\";\n\n/**\n * A scene component required for running the clustering step in clustered lights\n */\nexport class ClusteredLightingSceneComponent implements ISceneComponent {\n    /**\n     * The name of the component. Each component must have a unique name.\n     */\n    public name = SceneComponentConstants.NAME_CLUSTEREDLIGHTING;\n\n    /**\n     * The scene the component belongs to.\n     */\n    public scene: Scene;\n\n    /**\n     * Creates a new scene component.\n     * @param scene The scene the component belongs to\n     */\n    constructor(scene: Scene) {\n        this.scene = scene;\n    }\n\n    /**\n     * Disposes the component and the associated resources.\n     */\n    public dispose(): void {}\n\n    /**\n     * Rebuilds the elements related to this component in case of\n     * context lost for instance.\n     */\n    public rebuild(): void {}\n\n    /**\n     * Register the component to one instance of a scene.\n     */\n    public register(): void {\n        this.scene._gatherActiveCameraRenderTargetsStage.registerStep(\n            SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_CLUSTEREDLIGHTING,\n            this,\n            this._gatherActiveCameraRenderTargets\n        );\n    }\n\n    private _gatherActiveCameraRenderTargets: RenderTargetsStageAction = (renderTargets) => {\n        for (const light of this.scene.lights) {\n            if (light.getTypeID() === LightConstants.LIGHTTYPEID_CLUSTERED_CONTAINER && (<ClusteredLightContainer>light).isSupported) {\n                renderTargets.push((<ClusteredLightContainer>light)._updateBatches());\n            }\n        }\n    };\n}\n\nClusteredLightContainer._SceneComponentInitialization = (scene) => {\n    if (!scene._getComponent(SceneComponentConstants.NAME_CLUSTEREDLIGHTING)) {\n        scene._addComponent(new ClusteredLightingSceneComponent(scene));\n    }\n};\n"]}