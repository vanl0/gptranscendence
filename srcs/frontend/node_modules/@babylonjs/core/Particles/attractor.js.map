{"version":3,"file":"attractor.js","sourceRoot":"","sources":["../../../../dev/core/src/Particles/attractor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,gCAA+B;AAIjD,MAAM,WAAW,GAAY,OAAO,CAAC,IAAI,EAAE,CAAC;AAC5C,MAAM,KAAK,GAAY,OAAO,CAAC,IAAI,EAAE,CAAC;AACtC,MAAM,WAAW,GAAY,OAAO,CAAC,IAAI,EAAE,CAAC;AAE5C;;;GAGG;AACH,MAAM,OAAO,SAAS;IAAtB;QACI;;;WAGG;QACI,aAAQ,GAAG,GAAG,CAAC;QAEtB;;WAEG;QACI,aAAQ,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;IAuBrC,CAAC;IArBG,gBAAgB;IACT,gBAAgB,CAAC,QAAkB,EAAE,MAA0B;QAClE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC5D,MAAM,eAAe,GAAG,WAAW,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,wBAAwB;QACjF,WAAW,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,GAAG,eAAe,EAAE,KAAK,CAAC,CAAC;QAE3E,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,sBAAsB,EAAE,WAAW,CAAC,CAAC;QAE7D,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,2BAA2B;IAC3E,CAAC;IAED;;;OAGG;IACI,SAAS;QACZ,OAAO;YACH,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;YACjC,QAAQ,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC;IACN,CAAC;CACJ","sourcesContent":["import { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Particle } from \"./particle\";\r\nimport type { ThinParticleSystem } from \"./thinParticleSystem\";\r\n\r\nconst ToAttractor: Vector3 = Vector3.Zero();\r\nconst Force: Vector3 = Vector3.Zero();\r\nconst ScaledForce: Vector3 = Vector3.Zero();\r\n\r\n/**\r\n * Class representing an attractor in a particle system.\r\n * #DEZ79M#40\r\n */\r\nexport class Attractor {\r\n    /**\r\n     * Gets or sets the strength of the attractor.\r\n     * A positive value attracts particles, while a negative value repels them.\r\n     */\r\n    public strength = 0.0;\r\n\r\n    /**\r\n     * Gets or sets the position of the attractor in 3D space.\r\n     */\r\n    public position = Vector3.Zero();\r\n\r\n    /** @internal */\r\n    public _processParticle(particle: Particle, system: ThinParticleSystem) {\r\n        this.position.subtractToRef(particle.position, ToAttractor);\r\n        const distanceSquared = ToAttractor.lengthSquared() + 1; // Avoid going under 1.0\r\n        ToAttractor.normalize().scaleToRef(this.strength / distanceSquared, Force);\r\n\r\n        Force.scaleToRef(system._tempScaledUpdateSpeed, ScaledForce);\r\n\r\n        particle.direction.addInPlace(ScaledForce); // Update particle velocity\r\n    }\r\n\r\n    /**\r\n     * Serializes the attractor to a JSON object.\r\n     * @returns The serialized JSON object.\r\n     */\r\n    public serialize(): any {\r\n        return {\r\n            position: this.position.asArray(),\r\n            strength: this.strength,\r\n        };\r\n    }\r\n}\r\n"]}