{"version":3,"file":"nodeParticleSystemSet.helper.js","sourceRoot":"","sources":["../../../../../dev/core/src/Particles/Node/nodeParticleSystemSet.helper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { ParticleSystem } from \"../particleSystem\";\r\nimport { NodeParticleSystemSet } from \"./nodeParticleSystemSet\";\r\nimport { SystemBlock } from \"./Blocks/systemBlock\";\r\nimport { CreateParticleBlock } from \"./Blocks/Emitters/createParticleBlock\";\r\nimport { BoxShapeBlock } from \"./Blocks/Emitters/boxShapeBlock\";\r\nimport type { IShapeBlock } from \"./Blocks/Emitters/IShapeBlock\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { NodeParticleConnectionPoint } from \"./nodeParticleBlockConnectionPoint\";\r\nimport type { BoxParticleEmitter } from \"../EmitterTypes/boxParticleEmitter\";\r\nimport type { PointParticleEmitter } from \"../EmitterTypes/pointParticleEmitter\";\r\nimport type { SphereParticleEmitter } from \"../EmitterTypes/sphereParticleEmitter\";\r\nimport type { CylinderParticleEmitter, MeshParticleEmitter } from \"../EmitterTypes\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { ParticleInputBlock } from \"./Blocks/particleInputBlock\";\r\nimport { PointShapeBlock } from \"./Blocks/Emitters/pointShapeBlock\";\r\nimport { SphereShapeBlock } from \"./Blocks/Emitters/sphereShapeBlock\";\r\nimport { CylinderShapeBlock } from \"./Blocks/Emitters/cylinderShapeBlock\";\r\nimport { MeshShapeBlock } from \"./Blocks/Emitters/meshShapeBlock\";\r\nimport { ParticleTextureSourceBlock } from \"./Blocks/particleSourceTextureBlock\";\r\nimport type { Texture } from \"../../Materials/Textures/texture\";\r\nimport { BasicPositionUpdateBlock } from \"./Blocks/Update/basicPositionUpdateBlock\";\r\nimport { BasicColorUpdateBlock } from \"./Blocks/Update/basicColorUpdateBlock\";\r\nimport { ParticleRandomBlock } from \"./Blocks/particleRandomBlock\";\r\n\r\nfunction _CreateAndConnectInput(connectionPoint: NodeParticleConnectionPoint, name: string, defaultValue: Vector3 | number) {\r\n    const input = new ParticleInputBlock(name);\r\n    input.value = defaultValue;\r\n    input.output.connectTo(connectionPoint);\r\n}\r\n\r\nasync function _ExtractDatafromParticleSystemAsync(particleSystem: ParticleSystem, target: NodeParticleSystemSet) {\r\n    // Main system\r\n    const system = new SystemBlock(particleSystem.name);\r\n    system.capacity = particleSystem.getCapacity();\r\n    system.emitRate = particleSystem.emitRate;\r\n\r\n    // Create particle\r\n    const createParticleBlock = new CreateParticleBlock(\"Create particle\");\r\n\r\n    // Shape\r\n    let shapeBlock: Nullable<IShapeBlock> = null;\r\n    switch (particleSystem.particleEmitterType.getClassName()) {\r\n        case \"BoxParticleEmitter\": {\r\n            const source = particleSystem.particleEmitterType as BoxParticleEmitter;\r\n            shapeBlock = new BoxShapeBlock(\"Box shape\");\r\n\r\n            const target = shapeBlock as BoxShapeBlock;\r\n            _CreateAndConnectInput(target.direction1, \"Direction 1\", source.direction1);\r\n            _CreateAndConnectInput(target.direction2, \"Direction 2\", source.direction2);\r\n            _CreateAndConnectInput(target.minEmitBox, \"Min Emit Box\", source.minEmitBox);\r\n            _CreateAndConnectInput(target.maxEmitBox, \"Max Emit Box\", source.maxEmitBox);\r\n            break;\r\n        }\r\n        case \"PointParticleEmitter\": {\r\n            const source = particleSystem.particleEmitterType as PointParticleEmitter;\r\n            shapeBlock = new PointShapeBlock(\"Point shape\");\r\n\r\n            const target = shapeBlock as PointShapeBlock;\r\n            _CreateAndConnectInput(target.direction1, \"Direction 1\", source.direction1);\r\n            _CreateAndConnectInput(target.direction2, \"Direction 2\", source.direction2);\r\n            break;\r\n        }\r\n        case \"SphereParticleEmitter\": {\r\n            const source = particleSystem.particleEmitterType as SphereParticleEmitter;\r\n            shapeBlock = new SphereShapeBlock(\"Sphere shape\");\r\n\r\n            const target = shapeBlock as SphereShapeBlock;\r\n            _CreateAndConnectInput(target.radius, \"Radius\", source.radius);\r\n            _CreateAndConnectInput(target.radiusRange, \"Radius Range\", source.radiusRange);\r\n            _CreateAndConnectInput(target.directionRandomizer, \"Direction Randomizer\", source.directionRandomizer);\r\n            break;\r\n        }\r\n        case \"CylinderParticleEmitter\": {\r\n            const source = particleSystem.particleEmitterType as CylinderParticleEmitter;\r\n            shapeBlock = new CylinderShapeBlock(\"Cylinder shape\");\r\n\r\n            const target = shapeBlock as CylinderShapeBlock;\r\n            _CreateAndConnectInput(target.height, \"Height\", source.height);\r\n            _CreateAndConnectInput(target.radius, \"Radius\", source.radius);\r\n            _CreateAndConnectInput(target.radiusRange, \"Radius Range\", source.radiusRange);\r\n            _CreateAndConnectInput(target.directionRandomizer, \"Direction Randomizer\", source.directionRandomizer);\r\n            break;\r\n        }\r\n        case \"MeshParticleEmitter\": {\r\n            const source = particleSystem.particleEmitterType as MeshParticleEmitter;\r\n            shapeBlock = new MeshShapeBlock(\"Mesh shape\");\r\n\r\n            const target = shapeBlock as MeshShapeBlock;\r\n            _CreateAndConnectInput(target.direction1, \"Direction 1\", source.direction1);\r\n            _CreateAndConnectInput(target.direction2, \"Direction 2\", source.direction2);\r\n\r\n            target.mesh = source.mesh as Mesh;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (!shapeBlock) {\r\n        throw new Error(`Unsupported particle emitter type: ${particleSystem.particleEmitterType.getClassName()}`);\r\n    }\r\n\r\n    createParticleBlock.particle.connectTo(shapeBlock.particle);\r\n    createParticleBlock.colorDead.value = particleSystem.colorDead;\r\n\r\n    // Color\r\n    const color0Block = new ParticleInputBlock(\"Color0\");\r\n    color0Block.value = particleSystem.color1;\r\n\r\n    const color1Block = new ParticleInputBlock(\"Color1\");\r\n    color1Block.value = particleSystem.color2;\r\n\r\n    const randomColorBlock = new ParticleRandomBlock(\"Random Color\");\r\n    color0Block.output.connectTo(randomColorBlock.min);\r\n    color1Block.output.connectTo(randomColorBlock.max);\r\n\r\n    randomColorBlock.output.connectTo(createParticleBlock.color);\r\n\r\n    // Emit power\r\n    const minEmitPowerBlock = new ParticleInputBlock(\"Min Emit Power\");\r\n    minEmitPowerBlock.value = particleSystem.minEmitPower;\r\n\r\n    const maxEmitPowerBlock = new ParticleInputBlock(\"Max Emit Power\");\r\n    maxEmitPowerBlock.value = particleSystem.maxEmitPower;\r\n\r\n    const randomEmitPowerBlock = new ParticleRandomBlock(\"Random Emit Power\");\r\n    minEmitPowerBlock.output.connectTo(randomEmitPowerBlock.min);\r\n    maxEmitPowerBlock.output.connectTo(randomEmitPowerBlock.max);\r\n\r\n    randomEmitPowerBlock.output.connectTo(createParticleBlock.emitPower);\r\n\r\n    // Lifetime\r\n    const minLifetimeBlock = new ParticleInputBlock(\"Min Lifetime\");\r\n    minLifetimeBlock.value = particleSystem.minLifeTime;\r\n\r\n    const maxLifetimeBlock = new ParticleInputBlock(\"Max Lifetime\");\r\n    maxLifetimeBlock.value = particleSystem.maxLifeTime;\r\n\r\n    const randomLifetimeBlock = new ParticleRandomBlock(\"Random Lifetime\");\r\n    minLifetimeBlock.output.connectTo(randomLifetimeBlock.min);\r\n    maxLifetimeBlock.output.connectTo(randomLifetimeBlock.max);\r\n\r\n    randomLifetimeBlock.output.connectTo(createParticleBlock.lifeTime);\r\n\r\n    // Texture\r\n    const textureBlock = new ParticleTextureSourceBlock(\"Texture\");\r\n    const url = (particleSystem.particleTexture as Texture).url || \"\";\r\n    if (url) {\r\n        textureBlock.url = url;\r\n    } else {\r\n        textureBlock.sourceTexture = particleSystem.particleTexture;\r\n    }\r\n    textureBlock.texture.connectTo(system.texture);\r\n\r\n    // Default position update\r\n    const basicPositionUpdateBlock = new BasicPositionUpdateBlock(\"Position update\");\r\n    shapeBlock.output.connectTo(basicPositionUpdateBlock.particle);\r\n\r\n    // Default color update\r\n    const basicColorUpdateBlock = new BasicColorUpdateBlock(\"Color update\");\r\n    basicPositionUpdateBlock.output.connectTo(basicColorUpdateBlock.particle);\r\n    basicColorUpdateBlock.output.connectTo(system.particle);\r\n\r\n    // Register\r\n    target.systemBlocks.push(system);\r\n}\r\n\r\n/**\r\n * Converts a ParticleSystem to a NodeParticleSystemSet.\r\n * @param name The name of the node particle system set.\r\n * @param particleSystems The particle systems to convert.\r\n * @returns The converted node particle system set or null if conversion failed.\r\n * #0K3AQ2#3627\r\n */\r\nexport async function ConvertToNodeParticleSystemSetAsync(name: string, particleSystems: ParticleSystem[]): Promise<Nullable<NodeParticleSystemSet>> {\r\n    if (!particleSystems || !particleSystems.length) {\r\n        return null;\r\n    }\r\n\r\n    const nodeParticleSystemSet = new NodeParticleSystemSet(name);\r\n    const promises: Promise<void>[] = [];\r\n\r\n    for (const particleSystem of particleSystems) {\r\n        promises.push(_ExtractDatafromParticleSystemAsync(particleSystem, nodeParticleSystemSet));\r\n    }\r\n\r\n    await Promise.all(promises);\r\n    return nodeParticleSystemSet;\r\n}\r\n"]}