{"version":3,"file":"particleSourceTextureBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Particles/Node/Blocks/particleSourceTextureBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { Texture } from \"core/Materials/Textures/texture\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeParticleBlockConnectionPointTypes } from \"../Enums/nodeParticleBlockConnectionPointTypes\";\r\nimport { NodeParticleBlock } from \"../nodeParticleBlock\";\r\nimport type { NodeParticleConnectionPoint } from \"../nodeParticleBlockConnectionPoint\";\r\nimport type { NodeParticleBuildState } from \"../nodeParticleBuildState\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { TextureTools } from \"core/Misc/textureTools\";\r\nimport type { BaseTexture } from \"../../../Materials/Textures/baseTexture\";\r\n\r\n/**\r\n * Block used to provide a texture for particles in a particle system\r\n */\r\nexport class ParticleTextureSourceBlock extends NodeParticleBlock {\r\n    private _url: string = \"\";\r\n    private _textureDataUrl: string = \"\";\r\n    private _sourceTexture: Nullable<BaseTexture> = null;\r\n    private _cachedData: Nullable<{\r\n        width: number;\r\n        height: number;\r\n        data: Uint8ClampedArray;\r\n    }> = null;\r\n\r\n    /**\r\n     * Indicates if the texture data should be serialized as a base64 string.\r\n     */\r\n    public serializedCachedData: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets the URL of the texture to be used by this block.\r\n     */\r\n    public get url(): string {\r\n        return this._url;\r\n    }\r\n\r\n    public set url(value: string) {\r\n        if (this._url === value) {\r\n            return;\r\n        }\r\n        this._cachedData = null;\r\n        this._url = value;\r\n        this._textureDataUrl = \"\";\r\n        this._sourceTexture = null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the data URL of the texture to be used by this block.\r\n     * This is a base64 encoded string representing the texture data.\r\n     */\r\n    public get textureDataUrl(): string {\r\n        return this._textureDataUrl;\r\n    }\r\n\r\n    public set textureDataUrl(value: string) {\r\n        if (this._textureDataUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._cachedData = null;\r\n        this._textureDataUrl = value;\r\n        this._url = \"\";\r\n        this._sourceTexture = null;\r\n    }\r\n\r\n    /**\r\n     * Directly sets the texture to be used by this block.\r\n     * This value will not be serialized.\r\n     */\r\n    public set sourceTexture(value: Nullable<BaseTexture>) {\r\n        if (this._sourceTexture === value) {\r\n            return;\r\n        }\r\n        this._cachedData = null;\r\n        this._sourceTexture = value;\r\n        this._url = (value as Texture).url || \"\";\r\n        this._textureDataUrl = \"\";\r\n    }\r\n\r\n    /**\r\n     * Create a new ParticleTextureSourceBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerOutput(\"texture\", NodeParticleBlockConnectionPointTypes.Texture);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public override getClassName() {\r\n        return \"ParticleTextureSourceBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the texture output component\r\n     */\r\n    public get texture(): NodeParticleConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the texture content as a promise\r\n     * @returns a promise that resolves to the texture content, including width, height, and pixel data\r\n     */\r\n    async extractTextureContentAsync() {\r\n        if (!this.texture._storedValue && !this._sourceTexture) {\r\n            return null;\r\n        }\r\n\r\n        if (this._cachedData) {\r\n            return this._cachedData;\r\n        }\r\n\r\n        const texture = this.texture._storedValue || this._sourceTexture;\r\n        return await new Promise<\r\n            Nullable<{\r\n                width: number;\r\n                height: number;\r\n                data: Uint8ClampedArray;\r\n            }>\r\n        >((resolve, reject) => {\r\n            if (!texture.isReady()) {\r\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n                texture.onLoadObservable.addOnce(async () => {\r\n                    try {\r\n                        this._cachedData = await this.extractTextureContentAsync();\r\n                        resolve(this._cachedData);\r\n                    } catch (e) {\r\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                        reject(e);\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n            const size = texture.getSize();\r\n            TextureTools.GetTextureDataAsync(texture, size.width, size.height)\r\n                // eslint-disable-next-line github/no-then\r\n                .then((data) => {\r\n                    this._cachedData = {\r\n                        width: size.width,\r\n                        height: size.height,\r\n                        data: new Uint8ClampedArray(data),\r\n                    };\r\n                    texture.dispose();\r\n                    resolve(this._cachedData);\r\n                })\r\n                // eslint-disable-next-line github/no-then\r\n                .catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Builds the block\r\n     * @param state defines the current build state\r\n     */\r\n    public override _build(state: NodeParticleBuildState) {\r\n        if (this._sourceTexture) {\r\n            this.texture._storedValue = this._sourceTexture;\r\n            return;\r\n        }\r\n\r\n        if (!this._textureDataUrl && !this._url) {\r\n            this.texture._storedValue = null;\r\n            return;\r\n        }\r\n\r\n        if (this._textureDataUrl) {\r\n            this.texture._storedValue = new Texture(this._textureDataUrl, state.scene);\r\n            return;\r\n        }\r\n\r\n        this.texture._storedValue = new Texture(this._url, state.scene);\r\n    }\r\n\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.url = this.url;\r\n        serializationObject.serializedCachedData = this.serializedCachedData;\r\n\r\n        if (this.serializedCachedData) {\r\n            serializationObject.textureDataUrl = this.textureDataUrl;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public override _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.url = serializationObject.url;\r\n        this.serializedCachedData = !!serializationObject.serializedCachedData;\r\n\r\n        if (serializationObject.textureDataUrl) {\r\n            this.textureDataUrl = serializationObject.textureDataUrl;\r\n        }\r\n    }\r\n\r\n    public override dispose(): void {\r\n        if (!this._sourceTexture) {\r\n            if (this.texture._storedValue) {\r\n                this.texture._storedValue.dispose();\r\n                this.texture._storedValue = null;\r\n            }\r\n        }\r\n        super.dispose();\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleTextureSourceBlock\", ParticleTextureSourceBlock);\r\n"]}