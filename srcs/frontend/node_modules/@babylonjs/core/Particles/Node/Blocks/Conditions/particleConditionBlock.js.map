{"version":3,"file":"particleConditionBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/Particles/Node/Blocks/Conditions/particleConditionBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { WithinEpsilon } from \"../../../../Maths/math.scalar.functions\";\r\nimport type { NodeParticleBuildState } from \"../../nodeParticleBuildState\";\r\nimport { NodeParticleBlockConnectionPointTypes } from \"../../Enums/nodeParticleBlockConnectionPointTypes\";\r\nimport { NodeParticleBlock } from \"../../nodeParticleBlock\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"core/Decorators/nodeDecorator\";\r\nimport type { NodeParticleConnectionPoint } from \"../../nodeParticleBlockConnectionPoint\";\r\n\r\n/**\r\n * Conditions supported by the condition block\r\n */\r\nexport enum ParticleConditionBlockTests {\r\n    /** Equal */\r\n    Equal,\r\n    /** NotEqual */\r\n    NotEqual,\r\n    /** LessThan */\r\n    LessThan,\r\n    /** GreaterThan */\r\n    GreaterThan,\r\n    /** LessOrEqual */\r\n    LessOrEqual,\r\n    /** GreaterOrEqual */\r\n    GreaterOrEqual,\r\n    /** Logical Exclusive OR */\r\n    Xor,\r\n    /** Logical Or */\r\n    Or,\r\n    /** Logical And */\r\n    And,\r\n}\r\n\r\n/**\r\n * Block used to evaluate a condition and return a true or false value as a float (1 or 0).\r\n */\r\nexport class ParticleConditionBlock extends NodeParticleBlock {\r\n    /**\r\n     * Gets or sets the test used by the block\r\n     */\r\n    @editableInPropertyPage(\"Test\", PropertyTypeForEdition.List, \"ADVANCED\", {\r\n        notifiers: { rebuild: true },\r\n        embedded: true,\r\n        options: [\r\n            { label: \"Equal\", value: ParticleConditionBlockTests.Equal },\r\n            { label: \"NotEqual\", value: ParticleConditionBlockTests.NotEqual },\r\n            { label: \"LessThan\", value: ParticleConditionBlockTests.LessThan },\r\n            { label: \"GreaterThan\", value: ParticleConditionBlockTests.GreaterThan },\r\n            { label: \"LessOrEqual\", value: ParticleConditionBlockTests.LessOrEqual },\r\n            { label: \"GreaterOrEqual\", value: ParticleConditionBlockTests.GreaterOrEqual },\r\n            { label: \"Xor\", value: ParticleConditionBlockTests.Xor },\r\n            { label: \"Or\", value: ParticleConditionBlockTests.Or },\r\n            { label: \"And\", value: ParticleConditionBlockTests.And },\r\n        ],\r\n    })\r\n    public test = ParticleConditionBlockTests.Equal;\r\n\r\n    /**\r\n     * Gets or sets the epsilon value used for comparison\r\n     */\r\n    @editableInPropertyPage(\"Epsilon\", PropertyTypeForEdition.Float, \"ADVANCED\", { embedded: true, notifiers: { rebuild: true } })\r\n    public epsilon = 0;\r\n\r\n    /**\r\n     * Create a new ParticleConditionBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"left\", NodeParticleBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"right\", NodeParticleBlockConnectionPointTypes.Float, true, 0);\r\n        this.registerInput(\"ifTrue\", NodeParticleBlockConnectionPointTypes.AutoDetect, true, 1);\r\n        this.registerInput(\"ifFalse\", NodeParticleBlockConnectionPointTypes.AutoDetect, true, 0);\r\n        this.registerOutput(\"output\", NodeParticleBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this.output._typeConnectionSource = this._inputs[2];\r\n        this.output._defaultConnectionPointType = NodeParticleBlockConnectionPointTypes.Float;\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeParticleBlockConnectionPointTypes.Int);\r\n        this._inputs[1].acceptedConnectionPointTypes.push(NodeParticleBlockConnectionPointTypes.Int);\r\n        this._linkConnectionTypes(2, 3);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public override getClassName() {\r\n        return \"ParticleConditionBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the left input component\r\n     */\r\n    public get left(): NodeParticleConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right input component\r\n     */\r\n    public get right(): NodeParticleConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the ifTrue input component\r\n     */\r\n    public get ifTrue(): NodeParticleConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the ifFalse input component\r\n     */\r\n    public get ifFalse(): NodeParticleConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeParticleConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public override _build() {\r\n        const func = (state: NodeParticleBuildState) => {\r\n            const left = this.left.getConnectedValue(state) as number;\r\n            const right = this.right.getConnectedValue(state) as number;\r\n            let condition = false;\r\n\r\n            switch (this.test) {\r\n                case ParticleConditionBlockTests.Equal:\r\n                    condition = WithinEpsilon(left, right, this.epsilon);\r\n                    break;\r\n                case ParticleConditionBlockTests.NotEqual:\r\n                    condition = !WithinEpsilon(left, right, this.epsilon);\r\n                    break;\r\n                case ParticleConditionBlockTests.LessThan:\r\n                    condition = left < right + this.epsilon;\r\n                    break;\r\n                case ParticleConditionBlockTests.GreaterThan:\r\n                    condition = left > right - this.epsilon;\r\n                    break;\r\n                case ParticleConditionBlockTests.LessOrEqual:\r\n                    condition = left <= right + this.epsilon;\r\n                    break;\r\n                case ParticleConditionBlockTests.GreaterOrEqual:\r\n                    condition = left >= right - this.epsilon;\r\n                    break;\r\n                case ParticleConditionBlockTests.Xor:\r\n                    condition = (!!left && !right) || (!left && !!right);\r\n                    break;\r\n                case ParticleConditionBlockTests.Or:\r\n                    condition = !!left || !!right;\r\n                    break;\r\n                case ParticleConditionBlockTests.And:\r\n                    condition = !!left && !!right;\r\n                    break;\r\n            }\r\n            return condition;\r\n        };\r\n\r\n        this.output._storedFunction = (state) => {\r\n            if (func(state)) {\r\n                return this.ifTrue.getConnectedValue(state);\r\n            }\r\n\r\n            return this.ifFalse.getConnectedValue(state);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.test = this.test;\r\n        serializationObject.epsilon = this.epsilon;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public override _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.test = serializationObject.test;\r\n        if (serializationObject.epsilon !== undefined) {\r\n            this.epsilon = serializationObject.epsilon;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleConditionBlock\", ParticleConditionBlock);\r\n"]}