{"version":3,"file":"particleMathBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Particles/Node/Blocks/particleMathBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { NodeParticleBlock } from \"../nodeParticleBlock\";\r\nimport type { NodeParticleConnectionPoint } from \"../nodeParticleBlockConnectionPoint\";\r\nimport { NodeParticleBlockConnectionPointTypes } from \"../Enums/nodeParticleBlockConnectionPointTypes\";\r\nimport type { NodeParticleBuildState } from \"../nodeParticleBuildState\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\n\r\n/**\r\n * Operations supported by the Math block\r\n */\r\nexport enum ParticleMathBlockOperations {\r\n    /** Add */\r\n    Add,\r\n    /** Subtract */\r\n    Subtract,\r\n    /** Multiply */\r\n    Multiply,\r\n    /** Divide */\r\n    Divide,\r\n    /** Max */\r\n    Max,\r\n    /** Min */\r\n    Min,\r\n}\r\n\r\n/**\r\n * Block used to apply math functions\r\n */\r\nexport class ParticleMathBlock extends NodeParticleBlock {\r\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\r\n    @editableInPropertyPage(\"Operation\", PropertyTypeForEdition.List, \"ADVANCED\", {\r\n        notifiers: { rebuild: true },\r\n        embedded: true,\r\n        options: [\r\n            { label: \"Add\", value: ParticleMathBlockOperations.Add },\r\n            { label: \"Subtract\", value: ParticleMathBlockOperations.Subtract },\r\n            { label: \"Multiply\", value: ParticleMathBlockOperations.Multiply },\r\n            { label: \"Divide\", value: ParticleMathBlockOperations.Divide },\r\n            { label: \"Max\", value: ParticleMathBlockOperations.Max },\r\n            { label: \"Min\", value: ParticleMathBlockOperations.Min },\r\n        ],\r\n    })\r\n    public operation = ParticleMathBlockOperations.Add;\r\n\r\n    private readonly _connectionObservers: Observer<NodeParticleConnectionPoint>[];\r\n\r\n    /**\r\n     * Create a new ParticleMathBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"left\", NodeParticleBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"right\", NodeParticleBlockConnectionPointTypes.AutoDetect);\r\n\r\n        this.registerOutput(\"output\", NodeParticleBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this.output._typeConnectionSource = this.left;\r\n\r\n        const excludedConnectionPointTypes = [\r\n            NodeParticleBlockConnectionPointTypes.Matrix,\r\n            NodeParticleBlockConnectionPointTypes.Particle,\r\n            NodeParticleBlockConnectionPointTypes.Texture,\r\n            NodeParticleBlockConnectionPointTypes.System,\r\n            NodeParticleBlockConnectionPointTypes.FloatGradient,\r\n            NodeParticleBlockConnectionPointTypes.Color4Gradient,\r\n            NodeParticleBlockConnectionPointTypes.Vector2Gradient,\r\n            NodeParticleBlockConnectionPointTypes.Vector3Gradient,\r\n        ] as const;\r\n\r\n        this.left.excludedConnectionPointTypes.push(...excludedConnectionPointTypes);\r\n        this.right.excludedConnectionPointTypes.push(...excludedConnectionPointTypes);\r\n\r\n        this._linkConnectionTypes(0, 1);\r\n\r\n        this._connectionObservers = [\r\n            this.left.onConnectionObservable.add(() => this._updateInputOutputTypes()),\r\n            this.left.onDisconnectionObservable.add(() => this._updateInputOutputTypes()),\r\n            this.right.onConnectionObservable.add(() => this._updateInputOutputTypes()),\r\n            this.right.onDisconnectionObservable.add(() => this._updateInputOutputTypes()),\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public override getClassName() {\r\n        return \"ParticleMathBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the left input component\r\n     */\r\n    public get left(): NodeParticleConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right input component\r\n     */\r\n    public get right(): NodeParticleConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeParticleConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public override _build(state: NodeParticleBuildState) {\r\n        let func: (state: NodeParticleBuildState) => any;\r\n        const left = this.left;\r\n        const right = this.right;\r\n\r\n        if (!left.isConnected || !right.isConnected) {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = null;\r\n            return;\r\n        }\r\n\r\n        const leftIsScalar = left.type === NodeParticleBlockConnectionPointTypes.Float || left.type === NodeParticleBlockConnectionPointTypes.Int;\r\n        const rightIsScalar = right.type === NodeParticleBlockConnectionPointTypes.Float || right.type === NodeParticleBlockConnectionPointTypes.Int;\r\n\r\n        // If both input types are scalars, then this is a scalar operation.\r\n        const isScalar = leftIsScalar && rightIsScalar;\r\n\r\n        switch (this.operation) {\r\n            case ParticleMathBlockOperations.Add: {\r\n                if (isScalar) {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state) + right.getConnectedValue(state);\r\n                    };\r\n                } else if (leftIsScalar) {\r\n                    func = (state) => {\r\n                        return state.adapt(left, right.type).add(right.getConnectedValue(state));\r\n                    };\r\n                } else {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state).add(state.adapt(right, left.type));\r\n                    };\r\n                }\r\n                break;\r\n            }\r\n            case ParticleMathBlockOperations.Subtract: {\r\n                if (isScalar) {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state) - right.getConnectedValue(state);\r\n                    };\r\n                } else if (leftIsScalar) {\r\n                    func = (state) => {\r\n                        return state.adapt(left, right.type).subtract(right.getConnectedValue(state));\r\n                    };\r\n                } else {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state).subtract(state.adapt(right, left.type));\r\n                    };\r\n                }\r\n                break;\r\n            }\r\n            case ParticleMathBlockOperations.Multiply: {\r\n                if (isScalar) {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state) * right.getConnectedValue(state);\r\n                    };\r\n                } else if (leftIsScalar) {\r\n                    func = (state) => {\r\n                        return state.adapt(left, right.type).multiply(right.getConnectedValue(state));\r\n                    };\r\n                } else {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state).multiply(state.adapt(right, left.type));\r\n                    };\r\n                }\r\n                break;\r\n            }\r\n            case ParticleMathBlockOperations.Divide: {\r\n                if (isScalar) {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state) / right.getConnectedValue(state);\r\n                    };\r\n                } else if (leftIsScalar) {\r\n                    func = (state) => {\r\n                        return state.adapt(left, right.type).divide(right.getConnectedValue(state));\r\n                    };\r\n                } else {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state).divide(state.adapt(right, left.type));\r\n                    };\r\n                }\r\n                break;\r\n            }\r\n            case ParticleMathBlockOperations.Min: {\r\n                if (isScalar) {\r\n                    func = (state) => {\r\n                        return Math.min(left.getConnectedValue(state), right.getConnectedValue(state));\r\n                    };\r\n                } else {\r\n                    const [vector, scalar] = leftIsScalar ? [right, left] : [left, right];\r\n\r\n                    switch (vector.type) {\r\n                        case NodeParticleBlockConnectionPointTypes.Vector2: {\r\n                            func = (state) => {\r\n                                return Vector2.Minimize(vector.getConnectedValue(state), state.adapt(scalar, vector.type));\r\n                            };\r\n                            break;\r\n                        }\r\n                        case NodeParticleBlockConnectionPointTypes.Vector3: {\r\n                            func = (state) => {\r\n                                return Vector3.Minimize(vector.getConnectedValue(state), state.adapt(scalar, vector.type));\r\n                            };\r\n                            break;\r\n                        }\r\n                        case NodeParticleBlockConnectionPointTypes.Color4: {\r\n                            func = (state) => {\r\n                                const other = vector.getConnectedValue(state);\r\n                                const { r, g, b, a } = state.adapt(scalar, vector.type);\r\n\r\n                                return new Color4(Math.min(other.r, r), Math.min(other.g, g), Math.min(other.b, b), Math.min(other.a, a));\r\n                            };\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case ParticleMathBlockOperations.Max: {\r\n                if (isScalar) {\r\n                    func = (state) => {\r\n                        return Math.max(left.getConnectedValue(state), right.getConnectedValue(state));\r\n                    };\r\n                } else {\r\n                    const [vector, scalar] = leftIsScalar ? [right, left] : [left, right];\r\n\r\n                    switch (vector.type) {\r\n                        case NodeParticleBlockConnectionPointTypes.Vector2: {\r\n                            func = (state) => {\r\n                                return Vector2.Maximize(vector.getConnectedValue(state), state.adapt(scalar, vector.type));\r\n                            };\r\n                            break;\r\n                        }\r\n                        case NodeParticleBlockConnectionPointTypes.Vector3: {\r\n                            func = (state) => {\r\n                                return Vector3.Maximize(vector.getConnectedValue(state), state.adapt(scalar, vector.type));\r\n                            };\r\n                            break;\r\n                        }\r\n                        case NodeParticleBlockConnectionPointTypes.Color4: {\r\n                            func = (state) => {\r\n                                const other = vector.getConnectedValue(state);\r\n                                const { r, g, b, a } = state.adapt(scalar, vector.type);\r\n\r\n                                return new Color4(Math.max(other.r, r), Math.min(other.g, g), Math.min(other.b, b), Math.min(other.a, a));\r\n                            };\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.output._storedFunction = (state) => {\r\n            if (left.type === NodeParticleBlockConnectionPointTypes.Int) {\r\n                return func(state) | 0;\r\n            }\r\n            return func(state);\r\n        };\r\n    }\r\n\r\n    private _updateInputOutputTypes() {\r\n        // First update the output type with the initial assumption that we'll base it on the left input.\r\n        this.output._typeConnectionSource = this.left;\r\n\r\n        if (this.left.isConnected && this.right.isConnected) {\r\n            // Both inputs are connected, so we need to determine the output type based on the input types.\r\n            if (\r\n                this.left.type === NodeParticleBlockConnectionPointTypes.Int ||\r\n                (this.left.type === NodeParticleBlockConnectionPointTypes.Float && this.right.type !== NodeParticleBlockConnectionPointTypes.Int)\r\n            ) {\r\n                this.output._typeConnectionSource = this.right;\r\n            }\r\n        } else if (this.left.isConnected !== this.right.isConnected) {\r\n            // Only one input is connected, so we need to determine the output type based on the connected input.\r\n            this.output._typeConnectionSource = this.left.isConnected ? this.left : this.right;\r\n        }\r\n\r\n        // Next update the accepted connection point types for the inputs based on the current input connection state.\r\n        if (this.left.isConnected || this.right.isConnected) {\r\n            for (const [first, second] of [\r\n                [this.left, this.right],\r\n                [this.right, this.left],\r\n            ]) {\r\n                // Always allow Ints and Floats.\r\n                first.acceptedConnectionPointTypes = [NodeParticleBlockConnectionPointTypes.Int, NodeParticleBlockConnectionPointTypes.Float];\r\n\r\n                if (second.isConnected) {\r\n                    // The same types as the connected input are always allowed.\r\n                    first.acceptedConnectionPointTypes.push(second.type);\r\n\r\n                    // If the other input is a scalar, then we also allow Vector types.\r\n                    if (second.type === NodeParticleBlockConnectionPointTypes.Int || second.type === NodeParticleBlockConnectionPointTypes.Float) {\r\n                        first.acceptedConnectionPointTypes.push(\r\n                            NodeParticleBlockConnectionPointTypes.Vector2,\r\n                            NodeParticleBlockConnectionPointTypes.Vector3,\r\n                            NodeParticleBlockConnectionPointTypes.Color4\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release resources\r\n     */\r\n    public override dispose() {\r\n        super.dispose();\r\n        for (const observer of this._connectionObservers) {\r\n            observer.remove();\r\n        }\r\n        this._connectionObservers.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.operation = this.operation;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public override _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.operation = serializationObject.operation;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleMathBlock\", ParticleMathBlock);\r\n"]}