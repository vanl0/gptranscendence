{"version":3,"file":"particleTrigonometryBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Particles/Node/Blocks/particleTrigonometryBlock.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACxD,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AAC9D,OAAO,EAA0B,sBAAsB,EAAE,MAAM,mCAAmC,CAAC;AACnG,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAE,qCAAqC,EAAE,MAAM,gDAAgD,CAAC;AAGvG,OAAO,EAAE,MAAM,EAAE,qCAA8B;AAE/C;;GAEG;AACH,MAAM,CAAN,IAAY,mCA2CX;AA3CD,WAAY,mCAAmC;IAC3C,UAAU;IACV,2FAAG,CAAA;IACH,UAAU;IACV,2FAAG,CAAA;IACH,UAAU;IACV,2FAAG,CAAA;IACH,UAAU;IACV,2FAAG,CAAA;IACH,WAAW;IACX,6FAAI,CAAA;IACJ,YAAY;IACZ,+FAAK,CAAA;IACL,YAAY;IACZ,+FAAK,CAAA;IACL,cAAc;IACd,mGAAO,CAAA;IACP,kBAAkB;IAClB,6FAAI,CAAA;IACJ,UAAU;IACV,2FAAG,CAAA;IACH,cAAc;IACd,4FAAG,CAAA;IACH,kBAAkB;IAClB,kGAAM,CAAA;IACN,kBAAkB;IAClB,kGAAM,CAAA;IACN,gBAAgB;IAChB,kGAAM,CAAA;IACN,WAAW;IACX,8FAAI,CAAA;IACJ,aAAa;IACb,kGAAM,CAAA;IACN,eAAe;IACf,sGAAQ,CAAA;IACR,iBAAiB;IACjB,0GAAU,CAAA;IACV,gBAAgB;IAChB,wGAAS,CAAA;IACT,gBAAgB;IAChB,wGAAS,CAAA;IACT,YAAY;IACZ,gGAAK,CAAA;AACT,CAAC,EA3CW,mCAAmC,KAAnC,mCAAmC,QA2C9C;AAED;;GAEG;AACH,MAAM,OAAO,yBAA0B,SAAQ,iBAAiB;IAiC5D;;;OAGG;IACH,YAAmB,IAAY;QAC3B,KAAK,CAAC,IAAI,CAAC,CAAC;QArChB;;WAEG;QA4BI,cAAS,GAAG,mCAAmC,CAAC,GAAG,CAAC;QASvD,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,qCAAqC,CAAC,UAAU,CAAC,CAAC;QAC9E,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,qCAAqC,CAAC,YAAY,CAAC,CAAC;QAElF,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,qBAAqB,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAEzD,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,0CAA0C,CACtD,qCAAqC,CAAC,KAAK;YACvC,qCAAqC,CAAC,GAAG;YACzC,qCAAqC,CAAC,OAAO;YAC7C,qCAAqC,CAAC,OAAO;YAC7C,qCAAqC,CAAC,MAAM,CACnD,CAAC;IACN,CAAC;IAED;;;OAGG;IACa,YAAY;QACxB,OAAO,2BAA2B,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAEe,MAAM,CAAC,KAA6B;QAChD,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACpB,IAAI,IAAI,GAAwC,IAAI,CAAC;QAErD,QAAQ,IAAI,CAAC,SAAS,EAAE,CAAC;YACrB,KAAK,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC1C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC1C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC1C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC1C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC5C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;gBAC7C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC5C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC5C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC/C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC5C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC1C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC1C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC5C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3C,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC;gBACjC,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChD,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;gBACpC,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,UAAU,CAAC,CAAC,CAAC;gBAClD,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;gBACpC,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACjD,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;gBAClD,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACjD,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;gBAClD,MAAM;YACV,CAAC;YACD,KAAK,mCAAmC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7C,IAAI,GAAG,CAAC,KAAa,EAAE,EAAE;oBACrB,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC;wBACb,OAAO,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrC,CAAC;yBAAM,CAAC;wBACJ,OAAO,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACpC,CAAC;gBACL,CAAC,CAAC;gBACF,MAAM;YACV,CAAC;QACL,CAAC;QACD,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;YAChC,OAAO;QACX,CAAC;QAED,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YACtB,KAAK,qCAAqC,CAAC,GAAG,CAAC;YAC/C,KAAK,qCAAqC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC/C,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,CAAC,KAAK,EAAE,EAAE;oBACpC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;oBACnD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;gBACxB,CAAC,CAAC;gBACF,MAAM;YACV,CAAC;YACD,KAAK,qCAAqC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,CAAC,KAAK,EAAE,EAAE;oBACpC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;oBACnD,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvD,CAAC,CAAC;gBACF,MAAM;YACV,CAAC;YACD,KAAK,qCAAqC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,CAAC,KAAK,EAAE,EAAE;oBACpC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;oBACnD,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvE,CAAC,CAAC;gBACF,MAAM;YACV,CAAC;YACD,KAAK,qCAAqC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChD,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,CAAC,KAAK,EAAE,EAAE;oBACpC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;oBACnD,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtF,CAAC,CAAC;gBACF,MAAM;YACV,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEe,SAAS;QACrB,MAAM,mBAAmB,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAE9C,mBAAmB,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAE/C,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IAEe,YAAY,CAAC,mBAAwB;QACjD,KAAK,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;QAExC,IAAI,CAAC,SAAS,GAAG,mBAAmB,CAAC,SAAS,CAAC;IACnD,CAAC;CACJ;AAnMU;IA3BN,sBAAsB,CAAC,WAAW,uCAA+B,UAAU,EAAE;QAC1E,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;QAC5B,OAAO,EAAE;YACL,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,mCAAmC,CAAC,GAAG,EAAE;YAChE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,mCAAmC,CAAC,GAAG,EAAE;YAChE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,mCAAmC,CAAC,GAAG,EAAE;YAChE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,mCAAmC,CAAC,GAAG,EAAE;YAChE,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,mCAAmC,CAAC,IAAI,EAAE;YAClE,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,mCAAmC,CAAC,KAAK,EAAE;YACpE,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,mCAAmC,CAAC,KAAK,EAAE;YACpE,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,mCAAmC,CAAC,OAAO,EAAE;YACxE,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,mCAAmC,CAAC,IAAI,EAAE;YAClE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,mCAAmC,CAAC,GAAG,EAAE;YAChE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,mCAAmC,CAAC,GAAG,EAAE;YAChE,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,mCAAmC,CAAC,MAAM,EAAE;YACtE,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,mCAAmC,CAAC,MAAM,EAAE;YACtE,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,mCAAmC,CAAC,MAAM,EAAE;YACtE,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,mCAAmC,CAAC,IAAI,EAAE;YAClE,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,mCAAmC,CAAC,MAAM,EAAE;YACtE,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,mCAAmC,CAAC,QAAQ,EAAE;YAC1E,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,mCAAmC,CAAC,UAAU,EAAE;YAC9E,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,mCAAmC,CAAC,SAAS,EAAE;YAC5E,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,mCAAmC,CAAC,SAAS,EAAE;YAC5E,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,mCAAmC,CAAC,KAAK,EAAE;SACvE;KACJ,CAAC;4DACyD;AAqM/D,aAAa,CAAC,mCAAmC,EAAE,yBAAyB,CAAC,CAAC","sourcesContent":["import type { Nullable } from \"../../../types\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { Vector2, Vector3 } from \"../../../Maths/math.vector\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\nimport { NodeParticleBlock } from \"../nodeParticleBlock\";\r\nimport { NodeParticleBlockConnectionPointTypes } from \"../Enums/nodeParticleBlockConnectionPointTypes\";\r\nimport type { NodeParticleConnectionPoint } from \"../nodeParticleBlockConnectionPoint\";\r\nimport type { NodeParticleBuildState } from \"../nodeParticleBuildState\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\n\r\n/**\r\n * Operations supported by the Trigonometry block\r\n */\r\nexport enum ParticleTrigonometryBlockOperations {\r\n    /** Cos */\r\n    Cos,\r\n    /** Sin */\r\n    Sin,\r\n    /** Abs */\r\n    Abs,\r\n    /** Exp */\r\n    Exp,\r\n    /** Exp2 */\r\n    Exp2,\r\n    /** Round */\r\n    Round,\r\n    /** Floor */\r\n    Floor,\r\n    /** Ceiling */\r\n    Ceiling,\r\n    /** Square root */\r\n    Sqrt,\r\n    /** Log */\r\n    Log,\r\n    /** Tangent */\r\n    Tan,\r\n    /** Arc tangent */\r\n    ArcTan,\r\n    /** Arc cosinus */\r\n    ArcCos,\r\n    /** Arc sinus */\r\n    ArcSin,\r\n    /** Sign */\r\n    Sign,\r\n    /** Negate */\r\n    Negate,\r\n    /** OneMinus */\r\n    OneMinus,\r\n    /** Reciprocal */\r\n    Reciprocal,\r\n    /** ToDegrees */\r\n    ToDegrees,\r\n    /** ToRadians */\r\n    ToRadians,\r\n    /** Fract */\r\n    Fract,\r\n}\r\n\r\n/**\r\n * Block used to apply trigonometry operation to floats\r\n */\r\nexport class ParticleTrigonometryBlock extends NodeParticleBlock {\r\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\r\n    @editableInPropertyPage(\"Operation\", PropertyTypeForEdition.List, \"ADVANCED\", {\r\n        embedded: true,\r\n        notifiers: { rebuild: true },\r\n        options: [\r\n            { label: \"Cos\", value: ParticleTrigonometryBlockOperations.Cos },\r\n            { label: \"Sin\", value: ParticleTrigonometryBlockOperations.Sin },\r\n            { label: \"Abs\", value: ParticleTrigonometryBlockOperations.Abs },\r\n            { label: \"Exp\", value: ParticleTrigonometryBlockOperations.Exp },\r\n            { label: \"Exp2\", value: ParticleTrigonometryBlockOperations.Exp2 },\r\n            { label: \"Round\", value: ParticleTrigonometryBlockOperations.Round },\r\n            { label: \"Floor\", value: ParticleTrigonometryBlockOperations.Floor },\r\n            { label: \"Ceiling\", value: ParticleTrigonometryBlockOperations.Ceiling },\r\n            { label: \"Sqrt\", value: ParticleTrigonometryBlockOperations.Sqrt },\r\n            { label: \"Log\", value: ParticleTrigonometryBlockOperations.Log },\r\n            { label: \"Tan\", value: ParticleTrigonometryBlockOperations.Tan },\r\n            { label: \"ArcTan\", value: ParticleTrigonometryBlockOperations.ArcTan },\r\n            { label: \"ArcCos\", value: ParticleTrigonometryBlockOperations.ArcCos },\r\n            { label: \"ArcSin\", value: ParticleTrigonometryBlockOperations.ArcSin },\r\n            { label: \"Sign\", value: ParticleTrigonometryBlockOperations.Sign },\r\n            { label: \"Negate\", value: ParticleTrigonometryBlockOperations.Negate },\r\n            { label: \"OneMinus\", value: ParticleTrigonometryBlockOperations.OneMinus },\r\n            { label: \"Reciprocal\", value: ParticleTrigonometryBlockOperations.Reciprocal },\r\n            { label: \"ToDegrees\", value: ParticleTrigonometryBlockOperations.ToDegrees },\r\n            { label: \"ToRadians\", value: ParticleTrigonometryBlockOperations.ToRadians },\r\n            { label: \"Fract\", value: ParticleTrigonometryBlockOperations.Fract },\r\n        ],\r\n    })\r\n    public operation = ParticleTrigonometryBlockOperations.Cos;\r\n\r\n    /**\r\n     * Creates a new GeometryTrigonometryBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"input\", NodeParticleBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeParticleBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n\r\n        this._inputs[0].addExcludedConnectionPointFromAllowedTypes(\r\n            NodeParticleBlockConnectionPointTypes.Float |\r\n                NodeParticleBlockConnectionPointTypes.Int |\r\n                NodeParticleBlockConnectionPointTypes.Vector2 |\r\n                NodeParticleBlockConnectionPointTypes.Vector3 |\r\n                NodeParticleBlockConnectionPointTypes.Color4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public override getClassName() {\r\n        return \"ParticleTrigonometryBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeParticleConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeParticleConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public override _build(state: NodeParticleBuildState) {\r\n        super._build(state);\r\n        let func: Nullable<(value: number) => number> = null;\r\n\r\n        switch (this.operation) {\r\n            case ParticleTrigonometryBlockOperations.Cos: {\r\n                func = (value: number) => Math.cos(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Sin: {\r\n                func = (value: number) => Math.sin(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Abs: {\r\n                func = (value: number) => Math.abs(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Exp: {\r\n                func = (value: number) => Math.exp(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Exp2: {\r\n                func = (value: number) => Math.pow(2, value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Round: {\r\n                func = (value: number) => Math.round(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Floor: {\r\n                func = (value: number) => Math.floor(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Ceiling: {\r\n                func = (value: number) => Math.ceil(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Sqrt: {\r\n                func = (value: number) => Math.sqrt(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Log: {\r\n                func = (value: number) => Math.log(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Tan: {\r\n                func = (value: number) => Math.tan(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.ArcTan: {\r\n                func = (value: number) => Math.atan(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.ArcCos: {\r\n                func = (value: number) => Math.acos(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.ArcSin: {\r\n                func = (value: number) => Math.asin(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Sign: {\r\n                func = (value: number) => Math.sign(value);\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Negate: {\r\n                func = (value: number) => -value;\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.OneMinus: {\r\n                func = (value: number) => 1 - value;\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Reciprocal: {\r\n                func = (value: number) => 1 / value;\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.ToRadians: {\r\n                func = (value: number) => (value * Math.PI) / 180;\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.ToDegrees: {\r\n                func = (value: number) => (value * 180) / Math.PI;\r\n                break;\r\n            }\r\n            case ParticleTrigonometryBlockOperations.Fract: {\r\n                func = (value: number) => {\r\n                    if (value >= 0) {\r\n                        return value - Math.floor(value);\r\n                    } else {\r\n                        return value - Math.ceil(value);\r\n                    }\r\n                };\r\n                break;\r\n            }\r\n        }\r\n        if (!func) {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = null;\r\n            return;\r\n        }\r\n\r\n        switch (this.input.type) {\r\n            case NodeParticleBlockConnectionPointTypes.Int:\r\n            case NodeParticleBlockConnectionPointTypes.Float: {\r\n                this.output._storedFunction = (state) => {\r\n                    const source = this.input.getConnectedValue(state);\r\n                    return func(source);\r\n                };\r\n                break;\r\n            }\r\n            case NodeParticleBlockConnectionPointTypes.Vector2: {\r\n                this.output._storedFunction = (state) => {\r\n                    const source = this.input.getConnectedValue(state);\r\n                    return new Vector2(func(source.x), func(source.y));\r\n                };\r\n                break;\r\n            }\r\n            case NodeParticleBlockConnectionPointTypes.Vector3: {\r\n                this.output._storedFunction = (state) => {\r\n                    const source = this.input.getConnectedValue(state);\r\n                    return new Vector3(func(source.x), func(source.y), func(source.z));\r\n                };\r\n                break;\r\n            }\r\n            case NodeParticleBlockConnectionPointTypes.Color4: {\r\n                this.output._storedFunction = (state) => {\r\n                    const source = this.input.getConnectedValue(state);\r\n                    return new Color4(func(source.r), func(source.g), func(source.b), func(source.a));\r\n                };\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.operation = this.operation;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public override _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.operation = serializationObject.operation;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleTrigonometryBlock\", ParticleTrigonometryBlock);\r\n"]}