{"version":3,"file":"particleTriggerBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/Particles/Node/Blocks/Triggers/particleTriggerBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { NodeParticleBlock } from \"../../nodeParticleBlock\";\r\nimport { NodeParticleBlockConnectionPointTypes } from \"../../Enums/nodeParticleBlockConnectionPointTypes\";\r\nimport type { NodeParticleConnectionPoint } from \"../../nodeParticleBlockConnectionPoint\";\r\nimport type { NodeParticleBuildState } from \"../../nodeParticleBuildState\";\r\nimport type { ThinParticleSystem } from \"core/Particles/thinParticleSystem\";\r\nimport type { Particle } from \"core/Particles/particle\";\r\nimport { _ConnectAtTheEnd } from \"core/Particles/Queue/executionQueue\";\r\nimport type { SystemBlock } from \"../systemBlock\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"core/Decorators/nodeDecorator\";\r\nimport { _TriggerSubEmitter } from \"./triggerTools\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Block used to trigger a particle system based on a condition.\r\n */\r\nexport class ParticleTriggerBlock extends NodeParticleBlock {\r\n    private _triggerCount = 0;\r\n\r\n    /**\r\n     * Gets or sets the emit rate\r\n     */\r\n    @editableInPropertyPage(\"Max simultaneous\", PropertyTypeForEdition.Int, \"ADVANCED\", { embedded: true, notifiers: { rebuild: true }, min: 0 })\r\n    public limit = 5;\r\n\r\n    /**\r\n     * Gets or sets the emit rate\r\n     */\r\n    @editableInPropertyPage(\"Delay between calls (ms)\", PropertyTypeForEdition.Int, \"ADVANCED\", { embedded: true, notifiers: { rebuild: true }, min: 0 })\r\n    public delay = 250;\r\n\r\n    /**\r\n     * Create a new ParticleTriggerBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"input\", NodeParticleBlockConnectionPointTypes.Particle);\r\n        this.registerInput(\"condition\", NodeParticleBlockConnectionPointTypes.Float, true, 0);\r\n        this.registerInput(\"system\", NodeParticleBlockConnectionPointTypes.System);\r\n\r\n        this.registerOutput(\"output\", NodeParticleBlockConnectionPointTypes.Particle);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public override getClassName() {\r\n        return \"ParticleTriggerBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeParticleConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the condition input component\r\n     */\r\n    public get condition(): NodeParticleConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the target system input component\r\n     */\r\n    public get system(): NodeParticleConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeParticleConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    private _previousOne: Nullable<number> = null;\r\n\r\n    public override _build(state: NodeParticleBuildState) {\r\n        this._triggerCount = 0;\r\n        const system = this.input.getConnectedValue(state) as ThinParticleSystem;\r\n\r\n        const processCondition = (particle: Particle) => {\r\n            state.particleContext = particle;\r\n            state.systemContext = system;\r\n\r\n            if (this.condition.getConnectedValue(state) !== 0) {\r\n                if (this.limit === 0 || this._triggerCount < this.limit) {\r\n                    const now = new Date().getTime();\r\n                    if (this._previousOne && now - this._previousOne < this.delay) {\r\n                        return; // Skip if the delay has not passed\r\n                    }\r\n\r\n                    this._triggerCount++;\r\n                    this._previousOne = now;\r\n                    // Trigger the target particle system\r\n                    const targetSystem = this.system.getConnectedValue(state) as SystemBlock;\r\n                    if (targetSystem) {\r\n                        const clone = _TriggerSubEmitter(targetSystem, state.scene, particle.position);\r\n                        clone.onDisposeObservable.addOnce(() => {\r\n                            this._triggerCount--;\r\n                        });\r\n\r\n                        system.onDisposeObservable.addOnce(() => {\r\n                            // Clean up the cloned system when the original system is disposed\r\n                            clone.dispose();\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const conditionProcessing = {\r\n            process: processCondition,\r\n            previousItem: null,\r\n            nextItem: null,\r\n        };\r\n\r\n        if (system._updateQueueStart) {\r\n            _ConnectAtTheEnd(conditionProcessing, system._updateQueueStart);\r\n        } else {\r\n            system._updateQueueStart = conditionProcessing;\r\n        }\r\n\r\n        this.output._storedValue = system;\r\n    }\r\n\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.limit = this.limit;\r\n        serializationObject.delay = this.delay;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public override _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        if (serializationObject.limit !== undefined) {\r\n            this.limit = serializationObject.limit;\r\n        }\r\n\r\n        if (serializationObject.delay !== undefined) {\r\n            this.delay = serializationObject.delay;\r\n        }\r\n    }\r\n\r\n    public override dispose(): void {\r\n        super.dispose();\r\n        this._triggerCount = 0;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleTriggerBlock\", ParticleTriggerBlock);\r\n"]}