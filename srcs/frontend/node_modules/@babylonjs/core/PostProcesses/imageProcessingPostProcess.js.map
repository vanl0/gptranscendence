{"version":3,"file":"imageProcessingPostProcess.js","sourceRoot":"","sources":["../../../../dev/core/src/PostProcesses/imageProcessingPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport type { Color4 } from \"../Maths/math.color\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { ColorCurves } from \"../Materials/colorCurves\";\r\nimport type { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { ThinImageProcessingPostProcess } from \"./thinImageProcessingPostProcess\";\r\n\r\n/**\r\n * ImageProcessingPostProcess\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#imageprocessing\r\n */\r\nexport class ImageProcessingPostProcess extends PostProcess {\r\n    protected get _imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._effectWrapper.imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._effectWrapper.imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: ImageProcessingConfiguration) {\r\n        this._effectWrapper.imageProcessingConfiguration = value;\r\n    }\r\n\r\n    /**\r\n     * If the post process is supported.\r\n     */\r\n    public override get isSupported(): boolean {\r\n        const effect = this.getEffect();\r\n        return !effect || effect.isSupported;\r\n    }\r\n\r\n    /**\r\n     * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\r\n     */\r\n    public get colorCurves(): Nullable<ColorCurves> {\r\n        return this.imageProcessingConfiguration.colorCurves;\r\n    }\r\n    /**\r\n     * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\r\n     */\r\n    public set colorCurves(value: Nullable<ColorCurves>) {\r\n        this.imageProcessingConfiguration.colorCurves = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this.imageProcessingConfiguration.colorGradingTexture;\r\n    }\r\n    /**\r\n     * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        this.imageProcessingConfiguration.colorGradingTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this.imageProcessingConfiguration.exposure;\r\n    }\r\n    /**\r\n     * Sets exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        this.imageProcessingConfiguration.exposure = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether tonemapping is enabled or not.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._imageProcessingConfiguration.toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether tonemapping is enabled or not\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._imageProcessingConfiguration.toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        this._imageProcessingConfiguration.toneMappingType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this.imageProcessingConfiguration.contrast;\r\n    }\r\n    /**\r\n     * Sets contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        this.imageProcessingConfiguration.contrast = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette stretch size.\r\n     */\r\n    public get vignetteStretch(): number {\r\n        return this.imageProcessingConfiguration.vignetteStretch;\r\n    }\r\n    /**\r\n     * Sets Vignette stretch size.\r\n     */\r\n    public set vignetteStretch(value: number) {\r\n        this.imageProcessingConfiguration.vignetteStretch = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette center X Offset.\r\n     * @deprecated use vignetteCenterX instead\r\n     */\r\n    public get vignetteCentreX(): number {\r\n        return this.imageProcessingConfiguration.vignetteCenterX;\r\n    }\r\n    /**\r\n     * Sets Vignette center X Offset.\r\n     * @deprecated use vignetteCenterX instead\r\n     */\r\n    public set vignetteCentreX(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCenterX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette center Y Offset.\r\n     * @deprecated use vignetteCenterY instead\r\n     */\r\n    public get vignetteCentreY(): number {\r\n        return this.imageProcessingConfiguration.vignetteCenterY;\r\n    }\r\n    /**\r\n     * Sets Vignette center Y Offset.\r\n     * @deprecated use vignetteCenterY instead\r\n     */\r\n    public set vignetteCentreY(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCenterY = value;\r\n    }\r\n\r\n    /**\r\n     * Vignette center Y Offset.\r\n     */\r\n    public get vignetteCenterY(): number {\r\n        return this.imageProcessingConfiguration.vignetteCenterY;\r\n    }\r\n    public set vignetteCenterY(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCenterY = value;\r\n    }\r\n\r\n    /**\r\n     * Vignette center X Offset.\r\n     */\r\n    public get vignetteCenterX(): number {\r\n        return this.imageProcessingConfiguration.vignetteCenterX;\r\n    }\r\n    public set vignetteCenterX(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCenterX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette weight or intensity of the vignette effect.\r\n     */\r\n    public get vignetteWeight(): number {\r\n        return this.imageProcessingConfiguration.vignetteWeight;\r\n    }\r\n    /**\r\n     * Sets Vignette weight or intensity of the vignette effect.\r\n     */\r\n    public set vignetteWeight(value: number) {\r\n        this.imageProcessingConfiguration.vignetteWeight = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    public get vignetteColor(): Color4 {\r\n        return this.imageProcessingConfiguration.vignetteColor;\r\n    }\r\n    /**\r\n     * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    public set vignetteColor(value: Color4) {\r\n        this.imageProcessingConfiguration.vignetteColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Camera field of view used by the Vignette effect.\r\n     */\r\n    public get vignetteCameraFov(): number {\r\n        return this.imageProcessingConfiguration.vignetteCameraFov;\r\n    }\r\n    /**\r\n     * Sets Camera field of view used by the Vignette effect.\r\n     */\r\n    public set vignetteCameraFov(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCameraFov = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this.imageProcessingConfiguration.vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        this.imageProcessingConfiguration.vignetteBlendMode = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.vignetteEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets intensity of the dithering effect.\r\n     */\r\n    public get ditheringIntensity(): number {\r\n        return this.imageProcessingConfiguration.ditheringIntensity;\r\n    }\r\n    /**\r\n     * Sets intensity of the dithering effect.\r\n     */\r\n    public set ditheringIntensity(value: number) {\r\n        this.imageProcessingConfiguration.ditheringIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the dithering effect is enabled.\r\n     */\r\n    public get ditheringEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.ditheringEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the dithering effect is enabled.\r\n     */\r\n    public set ditheringEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.ditheringEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the input of the processing is in Gamma or Linear Space.\r\n     */\r\n    @serialize()\r\n    public get fromLinearSpace(): boolean {\r\n        return this._effectWrapper.fromLinearSpace;\r\n    }\r\n    /**\r\n     * Sets whether the input of the processing is in Gamma or Linear Space.\r\n     */\r\n    public set fromLinearSpace(value: boolean) {\r\n        this._effectWrapper.fromLinearSpace = value;\r\n    }\r\n\r\n    protected override _effectWrapper: ThinImageProcessingPostProcess;\r\n\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode?: number,\r\n        engine?: AbstractEngine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        imageProcessingConfiguration?: ImageProcessingConfiguration\r\n    ) {\r\n        const localOptions = {\r\n            size: typeof options === \"number\" ? options : undefined,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            textureType,\r\n            imageProcessingConfiguration,\r\n            scene: camera?.getScene(),\r\n            ...(options as PostProcessOptions),\r\n            blockCompilation: true,\r\n        };\r\n\r\n        super(name, ThinImageProcessingPostProcess.FragmentUrl, {\r\n            effectWrapper: typeof options === \"number\" || !options.effectWrapper ? new ThinImageProcessingPostProcess(name, engine, localOptions) : undefined,\r\n            ...localOptions,\r\n        });\r\n\r\n        this.onApply = () => {\r\n            this._effectWrapper.overrideAspectRatio = this.aspectRatio;\r\n        };\r\n    }\r\n\r\n    /**\r\n     *  \"ImageProcessingPostProcess\"\r\n     * @returns \"ImageProcessingPostProcess\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"ImageProcessingPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateParameters(): void {\r\n        this._effectWrapper._updateParameters();\r\n    }\r\n    public override dispose(camera?: Camera): void {\r\n        super.dispose(camera);\r\n\r\n        if (this._imageProcessingConfiguration) {\r\n            this.imageProcessingConfiguration.applyByPostProcess = false;\r\n        }\r\n    }\r\n}\r\n"]}