{"version":3,"file":"thinMotionBlurPostProcess.js","sourceRoot":"","sources":["../../../../dev/core/src/PostProcesses/thinMotionBlurPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EffectWrapperCreationOptions, Scene } from \"core/index\";\r\nimport { EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport { Matrix, TmpVectors } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * Post process used to apply a motion blur post process\r\n */\r\nexport class ThinMotionBlurPostProcess extends EffectWrapper {\r\n    /**\r\n     * The fragment shader url\r\n     */\r\n    public static readonly FragmentUrl = \"motionBlur\";\r\n\r\n    /**\r\n     * The list of uniforms used by the effect\r\n     */\r\n    public static readonly Uniforms = [\"motionStrength\", \"motionScale\", \"screenSize\", \"inverseViewProjection\", \"prevViewProjection\", \"projection\"];\r\n\r\n    /**\r\n     * The list of samplers used by the effect\r\n     */\r\n    public static readonly Samplers = [\"velocitySampler\", \"depthSampler\"];\r\n\r\n    /**\r\n     * The default defines used by the effect\r\n     */\r\n    public static readonly Defines = \"#define GEOMETRY_SUPPORTED\\n#define SAMPLES 64.0\\n#define OBJECT_BASED\";\r\n\r\n    protected override _gatherImports(useWebGPU: boolean, list: Promise<any>[]) {\r\n        if (useWebGPU) {\r\n            this._webGPUReady = true;\r\n            list.push(import(\"../ShadersWGSL/motionBlur.fragment\"));\r\n        } else {\r\n            list.push(import(\"../Shaders/motionBlur.fragment\"));\r\n        }\r\n    }\r\n\r\n    private _scene: Scene;\r\n    private _invViewProjection = Matrix.Identity();\r\n    private _previousViewProjection = Matrix.Identity();\r\n\r\n    /**\r\n     * Constructs a new motion blur post process\r\n     * @param name Name of the effect\r\n     * @param scene The scene the effect belongs to\r\n     * @param options Options to configure the effect\r\n     */\r\n    constructor(name: string, scene: Scene, options?: EffectWrapperCreationOptions) {\r\n        super({\r\n            ...options,\r\n            name,\r\n            engine: scene.getEngine(),\r\n            useShaderStore: true,\r\n            useAsPostProcess: true,\r\n            fragmentShader: ThinMotionBlurPostProcess.FragmentUrl,\r\n            uniforms: ThinMotionBlurPostProcess.Uniforms,\r\n            samplers: ThinMotionBlurPostProcess.Samplers,\r\n            defines: ThinMotionBlurPostProcess.Defines,\r\n        });\r\n\r\n        this._scene = scene;\r\n\r\n        this._applyMode();\r\n    }\r\n\r\n    /**\r\n     * Defines how much the image is blurred by the movement. Default value is equal to 1\r\n     */\r\n    public motionStrength: number = 1;\r\n\r\n    private _motionBlurSamples: number = 32;\r\n\r\n    /**\r\n     * Gets the number of iterations that are used for motion blur quality. Default value is equal to 32\r\n     */\r\n    public get motionBlurSamples(): number {\r\n        return this._motionBlurSamples;\r\n    }\r\n\r\n    /**\r\n     * Sets the number of iterations to be used for motion blur quality\r\n     */\r\n    public set motionBlurSamples(samples: number) {\r\n        this._motionBlurSamples = samples;\r\n        this._updateEffect();\r\n    }\r\n\r\n    private _isObjectBased: boolean = true;\r\n\r\n    /**\r\n     * Gets whether or not the motion blur post-process is in object based mode.\r\n     */\r\n    public get isObjectBased(): boolean {\r\n        return this._isObjectBased;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not the motion blur post-process is in object based mode.\r\n     */\r\n    public set isObjectBased(value: boolean) {\r\n        if (this._isObjectBased === value) {\r\n            return;\r\n        }\r\n\r\n        this._isObjectBased = value;\r\n        this._applyMode();\r\n    }\r\n\r\n    /**\r\n     * The width of the source texture\r\n     */\r\n    public textureWidth: number = 0;\r\n\r\n    /**\r\n     * The height of the source texture\r\n     */\r\n    public textureHeight: number = 0;\r\n\r\n    public override bind(noDefaultBindings = false) {\r\n        super.bind(noDefaultBindings);\r\n\r\n        const effect = this._drawWrapper.effect!;\r\n\r\n        effect.setFloat2(\"screenSize\", this.textureWidth, this.textureHeight);\r\n        effect.setFloat(\"motionScale\", this._scene.getAnimationRatio());\r\n        effect.setFloat(\"motionStrength\", this.motionStrength);\r\n\r\n        if (!this.isObjectBased) {\r\n            const viewProjection = TmpVectors.Matrix[0];\r\n            viewProjection.copyFrom(this._scene.getTransformMatrix());\r\n\r\n            viewProjection.invertToRef(this._invViewProjection);\r\n            effect.setMatrix(\"inverseViewProjection\", this._invViewProjection);\r\n\r\n            effect.setMatrix(\"prevViewProjection\", this._previousViewProjection);\r\n            this._previousViewProjection.copyFrom(viewProjection);\r\n\r\n            effect.setMatrix(\"projection\", this._scene.getProjectionMatrix());\r\n        }\r\n    }\r\n\r\n    private _updateEffect(): void {\r\n        const defines: string[] = [\r\n            \"#define GEOMETRY_SUPPORTED\",\r\n            \"#define SAMPLES \" + this._motionBlurSamples.toFixed(1),\r\n            this._isObjectBased ? \"#define OBJECT_BASED\" : \"#define SCREEN_BASED\",\r\n        ];\r\n\r\n        this.updateEffect(defines.join(\"\\n\"));\r\n    }\r\n\r\n    private _applyMode() {\r\n        this._updateEffect();\r\n        this._previousViewProjection.copyFrom(this._scene.getTransformMatrix());\r\n    }\r\n}\r\n"]}