{"version":3,"file":"taaMaterialManager.js","sourceRoot":"","sources":["../../../../../../dev/core/src/PostProcesses/RenderPipeline/Pipelines/taaMaterialManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Material } from \"core/Materials/material\";\nimport { MaterialDefines } from \"core/Materials/materialDefines\";\nimport { MaterialPluginBase } from \"core/Materials/materialPluginBase\";\nimport { RegisterMaterialPlugin, UnregisterMaterialPlugin } from \"core/Materials/materialPluginManager\";\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\nimport type { UniformBuffer } from \"core/Materials/uniformBuffer\";\nimport { Vector2 } from \"core/Maths/math.vector\";\nimport type { Scene } from \"core/scene\";\nimport type { Nullable } from \"core/types\";\nimport { RegisterClass } from \"../../../Misc/typeStore\";\n\nclass TAAJitterMaterialDefines extends MaterialDefines {\n    TAA_JITTER = false;\n}\n\nclass TAAJitterMaterialPlugin extends MaterialPluginBase {\n    public static readonly Name = \"TAAJitter\";\n\n    private _manager: Nullable<TAAMaterialManager>;\n    public get manager(): Nullable<TAAMaterialManager> {\n        return this._manager;\n    }\n\n    public set manager(manager: Nullable<TAAMaterialManager>) {\n        if (this._manager === manager) {\n            return;\n        }\n        this.dispose();\n        this._manager = manager;\n        manager?._materialPlugins.push(this);\n        this._updateMaterial();\n    }\n\n    public get isEnabled(): boolean {\n        return this._manager?.isEnabled ?? false;\n    }\n\n    constructor(material: Material) {\n        super(material, TAAJitterMaterialPlugin.Name, 300, new TAAJitterMaterialDefines());\n        this.registerForExtraEvents = true;\n        this.doNotSerialize = true;\n    }\n\n    /** @internal */\n    public _updateMaterial(): void {\n        this._enable(this.isEnabled);\n        this.markAllDefinesAsDirty();\n    }\n\n    public override isCompatible(): boolean {\n        return true;\n    }\n\n    public override getClassName(): string {\n        return \"TAAJitterMaterialPlugin\";\n    }\n\n    public override prepareDefines(defines: TAAJitterMaterialDefines): void {\n        defines.TAA_JITTER = this.isEnabled;\n    }\n\n    public override getUniforms(shaderLanguage = ShaderLanguage.GLSL) {\n        const ubo = [{ name: \"taa_jitter\", size: 2, type: \"vec2\" }];\n        if (shaderLanguage === ShaderLanguage.GLSL) {\n            return {\n                ubo,\n                vertex: `\n                    #ifdef TAA_JITTER\n                    uniform vec2 taa_jitter;\n                    #endif\n                `,\n            };\n        } else {\n            return { ubo };\n        }\n    }\n\n    public override hardBindForSubMesh(uniformBuffer: UniformBuffer): void {\n        if (this.isEnabled) {\n            const jitter = this._manager!.jitter;\n            uniformBuffer.updateFloat2(\"taa_jitter\", jitter.x, jitter.y);\n        }\n    }\n\n    public override getCustomCode(shaderType: string, shaderLanguage = ShaderLanguage.GLSL) {\n        // We jitter instead of modifying the camera so the velocity buffer stays unaffected\n        // More info: https://sugulee.wordpress.com/2021/06/21/temporal-anti-aliasingtaa-tutorial/\n        if (shaderType !== \"vertex\") {\n            return null;\n        } else if (shaderLanguage === ShaderLanguage.WGSL) {\n            return {\n                CUSTOM_VERTEX_MAIN_END: `\n                    #ifdef TAA_JITTER\n                    vertexOutputs.position += vec4f(uniforms.taa_jitter * vertexOutputs.position.w, 0, 1);\n                    #endif\n                `,\n            };\n        } else {\n            return {\n                CUSTOM_VERTEX_MAIN_END: `\n                    #ifdef TAA_JITTER\n                    gl_Position.xy += taa_jitter * gl_Position.w;\n                    #endif\n                `,\n            };\n        }\n    }\n\n    public override dispose(): void {\n        if (this._manager) {\n            const index = this._manager._materialPlugins.indexOf(this);\n            if (index !== -1) {\n                this._manager._materialPlugins.splice(index, 1);\n            }\n        }\n    }\n}\n\nRegisterClass(`BABYLON.TAAJitterMaterialPlugin`, TAAJitterMaterialPlugin);\n\n/**\n * Applies and manages the TAA jitter plugin on all materials.\n */\nexport class TAAMaterialManager {\n    private _isEnabled = true;\n    /**\n     * Set to enable or disable the jitter offset on all materials.\n     */\n    public get isEnabled(): boolean {\n        return this._isEnabled;\n    }\n\n    public set isEnabled(enabled: boolean) {\n        if (this._isEnabled === enabled) {\n            return;\n        }\n        this._isEnabled = enabled;\n        for (const plugin of this._materialPlugins) {\n            plugin._updateMaterial();\n        }\n    }\n\n    /**\n     * The current jitter offset to apply to all materials.\n     */\n    public readonly jitter = new Vector2();\n\n    /** @internal */\n    public readonly _materialPlugins: TAAJitterMaterialPlugin[] = [];\n\n    /**\n     * @param scene All materials in this scene will have a jitter offset applied to them.\n     */\n    constructor(scene: Scene) {\n        for (const material of scene.materials) {\n            this._getPlugin(material);\n        }\n        RegisterMaterialPlugin(TAAJitterMaterialPlugin.Name, (material) => this._getPlugin(material));\n    }\n\n    /**\n     * Disposes of the material manager.\n     */\n    public dispose(): void {\n        UnregisterMaterialPlugin(TAAJitterMaterialPlugin.Name);\n        const plugins = this._materialPlugins.splice(0, this._materialPlugins.length);\n        for (const plugin of plugins) {\n            plugin.manager = null;\n        }\n    }\n\n    private _getPlugin(material: Material): TAAJitterMaterialPlugin {\n        let plugin = material.pluginManager?.getPlugin<TAAJitterMaterialPlugin>(TAAJitterMaterialPlugin.Name);\n        if (!plugin) {\n            plugin = new TAAJitterMaterialPlugin(material);\n        }\n        plugin.manager = this;\n        return plugin;\n    }\n}\n"]}