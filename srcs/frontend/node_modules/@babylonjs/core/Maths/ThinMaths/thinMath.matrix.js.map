{"version":3,"file":"thinMath.matrix.js","sourceRoot":"","sources":["../../../../../dev/core/src/Maths/ThinMaths/thinMath.matrix.ts"],"names":[],"mappings":"AAGA;;;GAGG;AACH,MAAM,OAAO,UAAU;IAAvB;QACqB,OAAE,GAAsB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAU1H;;;;WAIG;QACI,eAAU,GAAW,CAAC,CAAC;IAClC,CAAC;IAdG;;;OAGG;IACI,OAAO;QACV,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;CAQJ","sourcesContent":["import type { Tuple } from \"core/types\";\r\nimport type { IMatrixLike } from \"../math.like\";\r\n\r\n/**\r\n * A thin matrix class that is used for size reasons.\r\n * The class is identity by default\r\n */\r\nexport class ThinMatrix implements IMatrixLike {\r\n    private readonly _m: Tuple<number, 16> = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0];\r\n\r\n    /**\r\n     * Returns the matrix as a Array<number>\r\n     * @returns the matrix underlying array.\r\n     */\r\n    public asArray(): Tuple<number, 16> {\r\n        return this._m;\r\n    }\r\n\r\n    /**\r\n     * Gets the update flag of the matrix which is an unique number for the matrix.\r\n     * It will be incremented every time the matrix data change.\r\n     * You can use it to speed the comparison between two versions of the same matrix.\r\n     */\r\n    public updateFlag: number = 0;\r\n}\r\n"]}