# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile.env                                       :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: rzhdanov <rzhdanov@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/09/19 03:03:47 by rzhdanov          #+#    #+#              #
#    Updated: 2025/09/19 10:30:22 by rzhdanov         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# this is to automate working with .env and avoid sharing local .env files in commits 
# .env.example will be updated every time a commit is done thanks to the pre-commit hook 
# (see .git/hooks/pre-commit for the script) 
# remember to run git config core.hooksPath srcs/.githooks after each cloning of the repo
# to update local .env from .env.example use sync-env manually
# command:
# make -f Makeflie.env sync-env
# I will make another hook later on to make it automated too during pull, don't have time just yet

#SHELL := /usr/bin/env bash
SHELL := /bin/bash
.ONESHELL:
.EXPORT_ALL_VARIABLES:

ENV_FILE := .env
ENV_EXAMPLE := .env.example

# Helpers: extract just KEYs (no comments/blank lines)
define EXTRACT_KEYS
grep -v '^[[:space:]]*#' $(1) 2>/dev/null \
| grep -E '^[[:space:]]*[^#=[:space:]][^=[:space:]]*' \
| sed -E 's/^[[:space:]]*([^=[:space:]]+).*/\1/' \
| sort -u
endef

.PHONY: update-env-example check-env sync-env env-diff

## Regenerate .env.example from your local .env (keeps placeholders, preserves comments & blank lines)
update-env-example:
	@if [[ ! -f $(ENV_FILE) ]]; then echo "No $(ENV_FILE) found"; exit 1; fi
	awk 'BEGIN{FS="="}
	/^[[:space:]]*#/ {print; next}
	/^[[:space:]]*$$/ {print ""; next}
	{
	  key=$$1; gsub(/^[[:space:]]+|[[:space:]]+$$/,"",key);
	  if (key!="") print key"=";
	}' $(ENV_FILE) > $(ENV_EXAMPLE)
	@echo "Updated $(ENV_EXAMPLE) from $(ENV_FILE)"

## Check drift: lists missing keys in .env, and extra keys only in .env
check-env:
	@if [[ ! -f $(ENV_EXAMPLE) ]]; then echo "No $(ENV_EXAMPLE) found"; exit 1; fi
	@touch $(ENV_FILE)
	@missing=$$(comm -23 <($(call EXTRACT_KEYS,$(ENV_EXAMPLE))) <($(call EXTRACT_KEYS,$(ENV_FILE)))); \
	extra=$$(comm -13 <($(call EXTRACT_KEYS,$(ENV_EXAMPLE))) <($(call EXTRACT_KEYS,$(ENV_FILE)))); \
	if [[ -n "$$missing" ]]; then echo "Missing in $(ENV_FILE):"; echo "$$missing"; echo; fi; \
	if [[ -n "$$extra" ]]; then echo "Extra in $(ENV_FILE):"; echo "$$extra"; echo; fi; \
	if [[ -z "$$missing" && -z "$$extra" ]]; then echo "âœ… .env matches .env.example"; else exit 2; fi

## Add any missing keys (from .env.example) into your .env with empty values
sync-env:
	@if [[ ! -f $(ENV_EXAMPLE) ]]; then echo "No $(ENV_EXAMPLE) found"; exit 1; fi
	@touch $(ENV_FILE)
	@missing=$$(comm -23 <($(call EXTRACT_KEYS,$(ENV_EXAMPLE))) <($(call EXTRACT_KEYS,$(ENV_FILE)))); \
	if [[ -z "$$missing" ]]; then echo "No missing keys to add."; exit 0; fi; \
	echo "$$missing" | while read -r k; do \
	  echo "$$k=" >> $(ENV_FILE); \
	  echo "Added $$k= to $(ENV_FILE)"; \
	done

## See key-level diff in terminal
env-diff:
	@diff -u <( $(call EXTRACT_KEYS,$(ENV_EXAMPLE)) ) <( $(call EXTRACT_KEYS,$(ENV_FILE)) ) || true
